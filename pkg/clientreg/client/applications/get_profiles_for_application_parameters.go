// Code generated by go-swagger; DO NOT EDIT.

package applications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetProfilesForApplicationParams creates a new GetProfilesForApplicationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetProfilesForApplicationParams() *GetProfilesForApplicationParams {
	return &GetProfilesForApplicationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetProfilesForApplicationParamsWithTimeout creates a new GetProfilesForApplicationParams object
// with the ability to set a timeout on a request.
func NewGetProfilesForApplicationParamsWithTimeout(timeout time.Duration) *GetProfilesForApplicationParams {
	return &GetProfilesForApplicationParams{
		timeout: timeout,
	}
}

// NewGetProfilesForApplicationParamsWithContext creates a new GetProfilesForApplicationParams object
// with the ability to set a context for a request.
func NewGetProfilesForApplicationParamsWithContext(ctx context.Context) *GetProfilesForApplicationParams {
	return &GetProfilesForApplicationParams{
		Context: ctx,
	}
}

// NewGetProfilesForApplicationParamsWithHTTPClient creates a new GetProfilesForApplicationParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetProfilesForApplicationParamsWithHTTPClient(client *http.Client) *GetProfilesForApplicationParams {
	return &GetProfilesForApplicationParams{
		HTTPClient: client,
	}
}

/* GetProfilesForApplicationParams contains all the parameters to send to the API endpoint
   for the get profiles for application operation.

   Typically these are written to a http.Request.
*/
type GetProfilesForApplicationParams struct {

	/* XAxwayTeamID.

	   The currently selected team if the user is using the system within a team context
	*/
	XAxwayTeamID *string

	/* XAxwayTenantID.

	   The tenant id
	*/
	XAxwayTenantID *string

	/* ApplicationID.

	   The application id
	*/
	ApplicationID string

	/* Query.

	   Query string for filtering entity. Expressed in FIQL/RSQL language.
	*/
	Query *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get profiles for application params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProfilesForApplicationParams) WithDefaults() *GetProfilesForApplicationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get profiles for application params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProfilesForApplicationParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get profiles for application params
func (o *GetProfilesForApplicationParams) WithTimeout(timeout time.Duration) *GetProfilesForApplicationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get profiles for application params
func (o *GetProfilesForApplicationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get profiles for application params
func (o *GetProfilesForApplicationParams) WithContext(ctx context.Context) *GetProfilesForApplicationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get profiles for application params
func (o *GetProfilesForApplicationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get profiles for application params
func (o *GetProfilesForApplicationParams) WithHTTPClient(client *http.Client) *GetProfilesForApplicationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get profiles for application params
func (o *GetProfilesForApplicationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXAxwayTeamID adds the xAxwayTeamID to the get profiles for application params
func (o *GetProfilesForApplicationParams) WithXAxwayTeamID(xAxwayTeamID *string) *GetProfilesForApplicationParams {
	o.SetXAxwayTeamID(xAxwayTeamID)
	return o
}

// SetXAxwayTeamID adds the xAxwayTeamId to the get profiles for application params
func (o *GetProfilesForApplicationParams) SetXAxwayTeamID(xAxwayTeamID *string) {
	o.XAxwayTeamID = xAxwayTeamID
}

// WithXAxwayTenantID adds the xAxwayTenantID to the get profiles for application params
func (o *GetProfilesForApplicationParams) WithXAxwayTenantID(xAxwayTenantID *string) *GetProfilesForApplicationParams {
	o.SetXAxwayTenantID(xAxwayTenantID)
	return o
}

// SetXAxwayTenantID adds the xAxwayTenantId to the get profiles for application params
func (o *GetProfilesForApplicationParams) SetXAxwayTenantID(xAxwayTenantID *string) {
	o.XAxwayTenantID = xAxwayTenantID
}

// WithApplicationID adds the applicationID to the get profiles for application params
func (o *GetProfilesForApplicationParams) WithApplicationID(applicationID string) *GetProfilesForApplicationParams {
	o.SetApplicationID(applicationID)
	return o
}

// SetApplicationID adds the applicationId to the get profiles for application params
func (o *GetProfilesForApplicationParams) SetApplicationID(applicationID string) {
	o.ApplicationID = applicationID
}

// WithQuery adds the query to the get profiles for application params
func (o *GetProfilesForApplicationParams) WithQuery(query *string) *GetProfilesForApplicationParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the get profiles for application params
func (o *GetProfilesForApplicationParams) SetQuery(query *string) {
	o.Query = query
}

// WriteToRequest writes these params to a swagger request
func (o *GetProfilesForApplicationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XAxwayTeamID != nil {

		// header param X-Axway-Team-Id
		if err := r.SetHeaderParam("X-Axway-Team-Id", *o.XAxwayTeamID); err != nil {
			return err
		}
	}

	if o.XAxwayTenantID != nil {

		// header param X-Axway-Tenant-Id
		if err := r.SetHeaderParam("X-Axway-Tenant-Id", *o.XAxwayTenantID); err != nil {
			return err
		}
	}

	// path param applicationId
	if err := r.SetPathParam("applicationId", o.ApplicationID); err != nil {
		return err
	}

	if o.Query != nil {

		// query param query
		var qrQuery string

		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {

			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
