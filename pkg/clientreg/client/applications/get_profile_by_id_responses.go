// Code generated by go-swagger; DO NOT EDIT.

package applications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/Axway/agents-kong/pkg/clientreg/models"
)

// GetProfileByIDReader is a Reader for the GetProfileByID structure.
type GetProfileByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProfileByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetProfileByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetProfileByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetProfileByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetProfileByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetProfileByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetProfileByIDOK creates a GetProfileByIDOK with default headers values
func NewGetProfileByIDOK() *GetProfileByIDOK {
	return &GetProfileByIDOK{}
}

/* GetProfileByIDOK describes a response with status code 200, with default header values.

The Profile specified by type for application
*/
type GetProfileByIDOK struct {
	Payload *GetProfileByIDOKBody
}

func (o *GetProfileByIDOK) Error() string {
	return fmt.Sprintf("[GET /applications/{applicationId}/profiles/{profileId}][%d] getProfileByIdOK  %+v", 200, o.Payload)
}
func (o *GetProfileByIDOK) GetPayload() *GetProfileByIDOKBody {
	return o.Payload
}

func (o *GetProfileByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetProfileByIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProfileByIDBadRequest creates a GetProfileByIDBadRequest with default headers values
func NewGetProfileByIDBadRequest() *GetProfileByIDBadRequest {
	return &GetProfileByIDBadRequest{}
}

/* GetProfileByIDBadRequest describes a response with status code 400, with default header values.

Bad Request, failed to validate request parameters
*/
type GetProfileByIDBadRequest struct {
}

func (o *GetProfileByIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /applications/{applicationId}/profiles/{profileId}][%d] getProfileByIdBadRequest ", 400)
}

func (o *GetProfileByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetProfileByIDUnauthorized creates a GetProfileByIDUnauthorized with default headers values
func NewGetProfileByIDUnauthorized() *GetProfileByIDUnauthorized {
	return &GetProfileByIDUnauthorized{}
}

/* GetProfileByIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized, user failed to authenticate
*/
type GetProfileByIDUnauthorized struct {
}

func (o *GetProfileByIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /applications/{applicationId}/profiles/{profileId}][%d] getProfileByIdUnauthorized ", 401)
}

func (o *GetProfileByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetProfileByIDForbidden creates a GetProfileByIDForbidden with default headers values
func NewGetProfileByIDForbidden() *GetProfileByIDForbidden {
	return &GetProfileByIDForbidden{}
}

/* GetProfileByIDForbidden describes a response with status code 403, with default header values.

Forbidden, the user does not have the correct permissions to call this API
*/
type GetProfileByIDForbidden struct {
}

func (o *GetProfileByIDForbidden) Error() string {
	return fmt.Sprintf("[GET /applications/{applicationId}/profiles/{profileId}][%d] getProfileByIdForbidden ", 403)
}

func (o *GetProfileByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetProfileByIDNotFound creates a GetProfileByIDNotFound with default headers values
func NewGetProfileByIDNotFound() *GetProfileByIDNotFound {
	return &GetProfileByIDNotFound{}
}

/* GetProfileByIDNotFound describes a response with status code 404, with default header values.

Not Found, a required entity was not found
*/
type GetProfileByIDNotFound struct {
}

func (o *GetProfileByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /applications/{applicationId}/profiles/{profileId}][%d] getProfileByIdNotFound ", 404)
}

func (o *GetProfileByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetProfileByIDOKBody get profile by ID o k body
swagger:model GetProfileByIDOKBody
*/
type GetProfileByIDOKBody struct {
	models.SSHPublicKeyProfile

	models.PublicCertificateProfile

	models.AuthenticationProfile

	models.SFTPProfile

	models.FTPProfile

	models.JWTKeyProfile

	models.OAuthClientProfile

	models.CFTProfile
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetProfileByIDOKBody) UnmarshalJSON(raw []byte) error {
	// GetProfileByIDOKBodyAO0
	var getProfileByIDOKBodyAO0 models.SSHPublicKeyProfile
	if err := swag.ReadJSON(raw, &getProfileByIDOKBodyAO0); err != nil {
		return err
	}
	o.SSHPublicKeyProfile = getProfileByIDOKBodyAO0

	// GetProfileByIDOKBodyAO1
	var getProfileByIDOKBodyAO1 models.PublicCertificateProfile
	if err := swag.ReadJSON(raw, &getProfileByIDOKBodyAO1); err != nil {
		return err
	}
	o.PublicCertificateProfile = getProfileByIDOKBodyAO1

	// GetProfileByIDOKBodyAO2
	var getProfileByIDOKBodyAO2 models.AuthenticationProfile
	if err := swag.ReadJSON(raw, &getProfileByIDOKBodyAO2); err != nil {
		return err
	}
	o.AuthenticationProfile = getProfileByIDOKBodyAO2

	// GetProfileByIDOKBodyAO3
	var getProfileByIDOKBodyAO3 models.SFTPProfile
	if err := swag.ReadJSON(raw, &getProfileByIDOKBodyAO3); err != nil {
		return err
	}
	o.SFTPProfile = getProfileByIDOKBodyAO3

	// GetProfileByIDOKBodyAO4
	var getProfileByIDOKBodyAO4 models.FTPProfile
	if err := swag.ReadJSON(raw, &getProfileByIDOKBodyAO4); err != nil {
		return err
	}
	o.FTPProfile = getProfileByIDOKBodyAO4

	// GetProfileByIDOKBodyAO5
	var getProfileByIDOKBodyAO5 models.JWTKeyProfile
	if err := swag.ReadJSON(raw, &getProfileByIDOKBodyAO5); err != nil {
		return err
	}
	o.JWTKeyProfile = getProfileByIDOKBodyAO5

	// GetProfileByIDOKBodyAO6
	var getProfileByIDOKBodyAO6 models.OAuthClientProfile
	if err := swag.ReadJSON(raw, &getProfileByIDOKBodyAO6); err != nil {
		return err
	}
	o.OAuthClientProfile = getProfileByIDOKBodyAO6

	// GetProfileByIDOKBodyAO7
	var getProfileByIDOKBodyAO7 models.CFTProfile
	if err := swag.ReadJSON(raw, &getProfileByIDOKBodyAO7); err != nil {
		return err
	}
	o.CFTProfile = getProfileByIDOKBodyAO7

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetProfileByIDOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 8)

	getProfileByIDOKBodyAO0, err := swag.WriteJSON(o.SSHPublicKeyProfile)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getProfileByIDOKBodyAO0)

	getProfileByIDOKBodyAO1, err := swag.WriteJSON(o.PublicCertificateProfile)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getProfileByIDOKBodyAO1)

	getProfileByIDOKBodyAO2, err := swag.WriteJSON(o.AuthenticationProfile)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getProfileByIDOKBodyAO2)

	getProfileByIDOKBodyAO3, err := swag.WriteJSON(o.SFTPProfile)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getProfileByIDOKBodyAO3)

	getProfileByIDOKBodyAO4, err := swag.WriteJSON(o.FTPProfile)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getProfileByIDOKBodyAO4)

	getProfileByIDOKBodyAO5, err := swag.WriteJSON(o.JWTKeyProfile)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getProfileByIDOKBodyAO5)

	getProfileByIDOKBodyAO6, err := swag.WriteJSON(o.OAuthClientProfile)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getProfileByIDOKBodyAO6)

	getProfileByIDOKBodyAO7, err := swag.WriteJSON(o.CFTProfile)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getProfileByIDOKBodyAO7)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get profile by ID o k body
func (o *GetProfileByIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SSHPublicKeyProfile
	if err := o.SSHPublicKeyProfile.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.PublicCertificateProfile
	if err := o.PublicCertificateProfile.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.AuthenticationProfile
	if err := o.AuthenticationProfile.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.SFTPProfile
	if err := o.SFTPProfile.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.FTPProfile
	if err := o.FTPProfile.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.JWTKeyProfile
	if err := o.JWTKeyProfile.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.OAuthClientProfile
	if err := o.OAuthClientProfile.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.CFTProfile
	if err := o.CFTProfile.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this get profile by ID o k body based on the context it is used
func (o *GetProfileByIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SSHPublicKeyProfile
	if err := o.SSHPublicKeyProfile.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.PublicCertificateProfile
	if err := o.PublicCertificateProfile.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.AuthenticationProfile
	if err := o.AuthenticationProfile.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.SFTPProfile
	if err := o.SFTPProfile.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.FTPProfile
	if err := o.FTPProfile.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.JWTKeyProfile
	if err := o.JWTKeyProfile.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.OAuthClientProfile
	if err := o.OAuthClientProfile.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.CFTProfile
	if err := o.CFTProfile.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetProfileByIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetProfileByIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetProfileByIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
