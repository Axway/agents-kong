// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User An API Central user
//
//
// swagger:model User
type User struct {

	// List of user admin roles
	AdminRoles []string `json:"adminRoles"`

	// The contact email address associated with the user
	// Max Length: 100
	// Pattern: ^[a-zA-Z0-9_+&*-]+(?:\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\.)+[a-zA-Z]{2,7}$
	Email string `json:"email,omitempty"`

	// Flag to indicate if this user is enabled or not
	Enabled *bool `json:"enabled,omitempty"`

	// The environment id for the user
	EnvironmentID string `json:"environmentId,omitempty"`

	// The id for the user
	// Max Length: 32
	// Min Length: 32
	ID string `json:"id,omitempty"`

	// The instance id for the user
	InstanceID string `json:"instanceId,omitempty"`

	// metadata
	Metadata *AuditMetadata `json:"metadata,omitempty"`

	// The preferred user name, it should uniquely identify the user
	// Required: true
	// Max Length: 100
	// Min Length: 1
	PreferredName *string `json:"preferredName"`

	// List of tags
	// Max Items: 30
	Tags []string `json:"tags"`

	// The teams the user is a member of, and their role within each team
	TeamRoles []*UserTeamRole `json:"teamRoles"`

	// The tenant id for the user
	TenantID string `json:"tenantId,omitempty"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdminRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferredName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamRoles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateAdminRoles(formats strfmt.Registry) error {
	if swag.IsZero(m.AdminRoles) { // not required
		return nil
	}

	for i := 0; i < len(m.AdminRoles); i++ {

		if err := validate.MinLength("adminRoles"+"."+strconv.Itoa(i), "body", m.AdminRoles[i], 32); err != nil {
			return err
		}

		if err := validate.MaxLength("adminRoles"+"."+strconv.Itoa(i), "body", m.AdminRoles[i], 32); err != nil {
			return err
		}

	}

	return nil
}

func (m *User) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("email", "body", m.Email, 100); err != nil {
		return err
	}

	if err := validate.Pattern("email", "body", m.Email, `^[a-zA-Z0-9_+&*-]+(?:\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\.)+[a-zA-Z]{2,7}$`); err != nil {
		return err
	}

	return nil
}

func (m *User) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", m.ID, 32); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", m.ID, 32); err != nil {
		return err
	}

	return nil
}

func (m *User) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *User) validatePreferredName(formats strfmt.Registry) error {

	if err := validate.Required("preferredName", "body", m.PreferredName); err != nil {
		return err
	}

	if err := validate.MinLength("preferredName", "body", *m.PreferredName, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("preferredName", "body", *m.PreferredName, 100); err != nil {
		return err
	}

	return nil
}

func (m *User) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	iTagsSize := int64(len(m.Tags))

	if err := validate.MaxItems("tags", "body", iTagsSize, 30); err != nil {
		return err
	}

	return nil
}

func (m *User) validateTeamRoles(formats strfmt.Registry) error {
	if swag.IsZero(m.TeamRoles) { // not required
		return nil
	}

	for i := 0; i < len(m.TeamRoles); i++ {
		if swag.IsZero(m.TeamRoles[i]) { // not required
			continue
		}

		if m.TeamRoles[i] != nil {
			if err := m.TeamRoles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("teamRoles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this user based on the context it is used
func (m *User) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTeamRoles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *User) contextValidateTeamRoles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TeamRoles); i++ {

		if m.TeamRoles[i] != nil {
			if err := m.TeamRoles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("teamRoles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
