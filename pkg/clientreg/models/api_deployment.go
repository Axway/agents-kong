// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIDeployment API deployment
//
// swagger:model APIDeployment
type APIDeployment struct {

	// List of deployment urls. A deployment url is a concatination of a runtime group endpoint and the proxy resource path.
	DeploymentUrls []string `json:"deploymentUrls"`

	// The environment unique identifier.
	// Max Length: 32
	// Min Length: 32
	EnvironmentID string `json:"environmentId,omitempty"`

	// Api deployment unique identifier.
	// Max Length: 32
	// Min Length: 32
	ID string `json:"id,omitempty"`

	// metadata
	Metadata *AuditMetadata `json:"metadata,omitempty"`

	// Proxy unique identifier.
	// Required: true
	// Max Length: 32
	// Min Length: 32
	ProxyID *string `json:"proxyId"`

	// Proxy revision identifier.
	// Required: true
	ProxyRevision *int64 `json:"proxyRevision"`

	// Resource path.
	ResourcePath string `json:"resourcePath,omitempty"`

	// The runtime group unique identifier.
	// Required: true
	// Max Length: 32
	// Min Length: 32
	RuntimeGroupID *string `json:"runtimeGroupId"`

	// state
	State *APIDeploymentState `json:"state,omitempty"`
}

// Validate validates this API deployment
func (m *APIDeployment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvironmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuntimeGroupID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIDeployment) validateEnvironmentID(formats strfmt.Registry) error {
	if swag.IsZero(m.EnvironmentID) { // not required
		return nil
	}

	if err := validate.MinLength("environmentId", "body", m.EnvironmentID, 32); err != nil {
		return err
	}

	if err := validate.MaxLength("environmentId", "body", m.EnvironmentID, 32); err != nil {
		return err
	}

	return nil
}

func (m *APIDeployment) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", m.ID, 32); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", m.ID, 32); err != nil {
		return err
	}

	return nil
}

func (m *APIDeployment) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *APIDeployment) validateProxyID(formats strfmt.Registry) error {

	if err := validate.Required("proxyId", "body", m.ProxyID); err != nil {
		return err
	}

	if err := validate.MinLength("proxyId", "body", *m.ProxyID, 32); err != nil {
		return err
	}

	if err := validate.MaxLength("proxyId", "body", *m.ProxyID, 32); err != nil {
		return err
	}

	return nil
}

func (m *APIDeployment) validateProxyRevision(formats strfmt.Registry) error {

	if err := validate.Required("proxyRevision", "body", m.ProxyRevision); err != nil {
		return err
	}

	return nil
}

func (m *APIDeployment) validateRuntimeGroupID(formats strfmt.Registry) error {

	if err := validate.Required("runtimeGroupId", "body", m.RuntimeGroupID); err != nil {
		return err
	}

	if err := validate.MinLength("runtimeGroupId", "body", *m.RuntimeGroupID, 32); err != nil {
		return err
	}

	if err := validate.MaxLength("runtimeGroupId", "body", *m.RuntimeGroupID, 32); err != nil {
		return err
	}

	return nil
}

func (m *APIDeployment) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this API deployment based on the context it is used
func (m *APIDeployment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIDeployment) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *APIDeployment) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if m.State != nil {
		if err := m.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIDeployment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIDeployment) UnmarshalBinary(b []byte) error {
	var res APIDeployment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
