// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RuntimeGroupState runtime group state
//
// swagger:model RuntimeGroupState
type RuntimeGroupState struct {

	// value
	// Required: true
	// Enum: [ACTIVE SUSPENDED]
	Value *string `json:"value"`
}

// Validate validates this runtime group state
func (m *RuntimeGroupState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var runtimeGroupStateTypeValuePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACTIVE","SUSPENDED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		runtimeGroupStateTypeValuePropEnum = append(runtimeGroupStateTypeValuePropEnum, v)
	}
}

const (

	// RuntimeGroupStateValueACTIVE captures enum value "ACTIVE"
	RuntimeGroupStateValueACTIVE string = "ACTIVE"

	// RuntimeGroupStateValueSUSPENDED captures enum value "SUSPENDED"
	RuntimeGroupStateValueSUSPENDED string = "SUSPENDED"
)

// prop value enum
func (m *RuntimeGroupState) validateValueEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, runtimeGroupStateTypeValuePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RuntimeGroupState) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	// value enum
	if err := m.validateValueEnum("value", "body", *m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this runtime group state based on context it is used
func (m *RuntimeGroupState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RuntimeGroupState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RuntimeGroupState) UnmarshalBinary(b []byte) error {
	var res RuntimeGroupState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
