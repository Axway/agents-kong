// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Resource resource
//
// swagger:model Resource
type Resource struct {

	// Resource unique identifier
	// Max Length: 32
	// Min Length: 32
	ID string `json:"id,omitempty"`

	// the name of the resource
	// Max Length: 100
	// Min Length: 1
	// Pattern: ^[\w-_\:\.\/]*$
	Name string `json:"name,omitempty"`

	// the type of the resource
	// Max Length: 100
	// Min Length: 1
	// Pattern: ^[\w-_\:\.\/]*$
	Type string `json:"type,omitempty"`
}

// Validate validates this resource
func (m *Resource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Resource) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", m.ID, 32); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", m.ID, 32); err != nil {
		return err
	}

	return nil
}

func (m *Resource) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", m.Name, 100); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", m.Name, `^[\w-_\:\.\/]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Resource) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := validate.MinLength("type", "body", m.Type, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("type", "body", m.Type, 100); err != nil {
		return err
	}

	if err := validate.Pattern("type", "body", m.Type, `^[\w-_\:\.\/]*$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this resource based on context it is used
func (m *Resource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Resource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Resource) UnmarshalBinary(b []byte) error {
	var res Resource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
