// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RateLimitingPolicy Rate Limiting Policy details
//
// swagger:model RateLimitingPolicy
type RateLimitingPolicy struct {
	idField *string

	policyField *string

	// per proxy
	// Required: true
	PerProxy *RateLimitingPolicyLevelDefinition `json:"perProxy"`

	// per proxy and application
	// Required: true
	PerProxyAndApplication *RateLimitingPolicyLevelDefinition `json:"perProxyAndApplication"`
}

// ID gets the id of this subtype
func (m *RateLimitingPolicy) ID() *string {
	return m.idField
}

// SetID sets the id of this subtype
func (m *RateLimitingPolicy) SetID(val *string) {
	m.idField = val
}

// Policy gets the policy of this subtype
func (m *RateLimitingPolicy) Policy() *string {
	return m.policyField
}

// SetPolicy sets the policy of this subtype
func (m *RateLimitingPolicy) SetPolicy(val *string) {
	m.policyField = val
}

// Type gets the type of this subtype
func (m *RateLimitingPolicy) Type() string {
	return "RateLimitingPolicy"
}

// SetType sets the type of this subtype
func (m *RateLimitingPolicy) SetType(val string) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *RateLimitingPolicy) UnmarshalJSON(raw []byte) error {
	var data struct {

		// per proxy
		// Required: true
		PerProxy *RateLimitingPolicyLevelDefinition `json:"perProxy"`

		// per proxy and application
		// Required: true
		PerProxyAndApplication *RateLimitingPolicyLevelDefinition `json:"perProxyAndApplication"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		ID *string `json:"id"`

		Policy *string `json:"policy"`

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result RateLimitingPolicy

	result.idField = base.ID

	result.policyField = base.Policy

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.PerProxy = data.PerProxy
	result.PerProxyAndApplication = data.PerProxyAndApplication

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m RateLimitingPolicy) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// per proxy
		// Required: true
		PerProxy *RateLimitingPolicyLevelDefinition `json:"perProxy"`

		// per proxy and application
		// Required: true
		PerProxyAndApplication *RateLimitingPolicyLevelDefinition `json:"perProxyAndApplication"`
	}{

		PerProxy: m.PerProxy,

		PerProxyAndApplication: m.PerProxyAndApplication,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		ID *string `json:"id"`

		Policy *string `json:"policy"`

		Type string `json:"type"`
	}{

		ID: m.ID(),

		Policy: m.Policy(),

		Type: m.Type(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this rate limiting policy
func (m *RateLimitingPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerProxy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerProxyAndApplication(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RateLimitingPolicy) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID()); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", *m.ID(), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", *m.ID(), 100); err != nil {
		return err
	}

	if err := validate.Pattern("id", "body", *m.ID(), `^[\w-_\:\.\/]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RateLimitingPolicy) validatePolicy(formats strfmt.Registry) error {

	if err := validate.Required("policy", "body", m.Policy()); err != nil {
		return err
	}

	if err := validate.MinLength("policy", "body", *m.Policy(), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("policy", "body", *m.Policy(), 100); err != nil {
		return err
	}

	if err := validate.Pattern("policy", "body", *m.Policy(), `^[\w-_\:\.\/]*$`); err != nil {
		return err
	}

	return nil
}

func (m *RateLimitingPolicy) validatePerProxy(formats strfmt.Registry) error {

	if err := validate.Required("perProxy", "body", m.PerProxy); err != nil {
		return err
	}

	if m.PerProxy != nil {
		if err := m.PerProxy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("perProxy")
			}
			return err
		}
	}

	return nil
}

func (m *RateLimitingPolicy) validatePerProxyAndApplication(formats strfmt.Registry) error {

	if err := validate.Required("perProxyAndApplication", "body", m.PerProxyAndApplication); err != nil {
		return err
	}

	if m.PerProxyAndApplication != nil {
		if err := m.PerProxyAndApplication.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("perProxyAndApplication")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this rate limiting policy based on the context it is used
func (m *RateLimitingPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePerProxy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePerProxyAndApplication(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RateLimitingPolicy) contextValidatePerProxy(ctx context.Context, formats strfmt.Registry) error {

	if m.PerProxy != nil {
		if err := m.PerProxy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("perProxy")
			}
			return err
		}
	}

	return nil
}

func (m *RateLimitingPolicy) contextValidatePerProxyAndApplication(ctx context.Context, formats strfmt.Registry) error {

	if m.PerProxyAndApplication != nil {
		if err := m.PerProxyAndApplication.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("perProxyAndApplication")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RateLimitingPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RateLimitingPolicy) UnmarshalBinary(b []byte) error {
	var res RateLimitingPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
