// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIProxy API proxy
//
// swagger:model APIProxy
type APIProxy struct {

	// The list of deployments for this proxy.
	// Read Only: true
	Deployments []*APIProxyDeployment `json:"deployments"`

	// The description of the Api Proxy.
	Description string `json:"description,omitempty"`

	// The list of external references for this proxy.
	// Read Only: true
	ExternalReferences []*ProxyExternalReference `json:"externalReferences"`

	// API Proxy unique identifier
	ID string `json:"id,omitempty"`

	// metadata
	Metadata *AuditMetadata `json:"metadata,omitempty"`

	// The name of the API proxy, which must be unique.
	// Required: true
	// Max Length: 100
	// Pattern: ^[\w\s-_()\[\]]*$
	Name *string `json:"name"`

	// The id of the owning team for this proxy.
	// Max Length: 36
	// Min Length: 32
	// Pattern: ^[\w\s-_()\[\]]*$
	OwningTeamID string `json:"owningTeamId,omitempty"`

	// The list of revisions for this proxy.
	// Read Only: true
	Revision []int32 `json:"revision"`

	// The list of revisions for this proxy.
	// Read Only: true
	Revisions []*APIProxyRevision `json:"revisions"`

	// state
	State *ProxyState `json:"state,omitempty"`

	// List of tags
	// Max Items: 30
	Tags []string `json:"tags"`
}

// Validate validates this API proxy
func (m *APIProxy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeployments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalReferences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwningTeamID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevisions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIProxy) validateDeployments(formats strfmt.Registry) error {
	if swag.IsZero(m.Deployments) { // not required
		return nil
	}

	for i := 0; i < len(m.Deployments); i++ {
		if swag.IsZero(m.Deployments[i]) { // not required
			continue
		}

		if m.Deployments[i] != nil {
			if err := m.Deployments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deployments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIProxy) validateExternalReferences(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalReferences) { // not required
		return nil
	}

	for i := 0; i < len(m.ExternalReferences); i++ {
		if swag.IsZero(m.ExternalReferences[i]) { // not required
			continue
		}

		if m.ExternalReferences[i] != nil {
			if err := m.ExternalReferences[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("externalReferences" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIProxy) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *APIProxy) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 100); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", *m.Name, `^[\w\s-_()\[\]]*$`); err != nil {
		return err
	}

	return nil
}

func (m *APIProxy) validateOwningTeamID(formats strfmt.Registry) error {
	if swag.IsZero(m.OwningTeamID) { // not required
		return nil
	}

	if err := validate.MinLength("owningTeamId", "body", m.OwningTeamID, 32); err != nil {
		return err
	}

	if err := validate.MaxLength("owningTeamId", "body", m.OwningTeamID, 36); err != nil {
		return err
	}

	if err := validate.Pattern("owningTeamId", "body", m.OwningTeamID, `^[\w\s-_()\[\]]*$`); err != nil {
		return err
	}

	return nil
}

func (m *APIProxy) validateRevisions(formats strfmt.Registry) error {
	if swag.IsZero(m.Revisions) { // not required
		return nil
	}

	for i := 0; i < len(m.Revisions); i++ {
		if swag.IsZero(m.Revisions[i]) { // not required
			continue
		}

		if m.Revisions[i] != nil {
			if err := m.Revisions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("revisions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIProxy) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *APIProxy) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	iTagsSize := int64(len(m.Tags))

	if err := validate.MaxItems("tags", "body", iTagsSize, 30); err != nil {
		return err
	}

	for i := 0; i < len(m.Tags); i++ {

		if err := validate.MinLength("tags"+"."+strconv.Itoa(i), "body", m.Tags[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("tags"+"."+strconv.Itoa(i), "body", m.Tags[i], 80); err != nil {
			return err
		}

		if err := validate.Pattern("tags"+"."+strconv.Itoa(i), "body", m.Tags[i], `^[\w\s-_()\[\]]*$`); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validate this API proxy based on the context it is used
func (m *APIProxy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeployments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalReferences(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRevision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRevisions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIProxy) contextValidateDeployments(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deployments", "body", []*APIProxyDeployment(m.Deployments)); err != nil {
		return err
	}

	for i := 0; i < len(m.Deployments); i++ {

		if m.Deployments[i] != nil {
			if err := m.Deployments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deployments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIProxy) contextValidateExternalReferences(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "externalReferences", "body", []*ProxyExternalReference(m.ExternalReferences)); err != nil {
		return err
	}

	for i := 0; i < len(m.ExternalReferences); i++ {

		if m.ExternalReferences[i] != nil {
			if err := m.ExternalReferences[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("externalReferences" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIProxy) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *APIProxy) contextValidateRevision(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "revision", "body", []int32(m.Revision)); err != nil {
		return err
	}

	return nil
}

func (m *APIProxy) contextValidateRevisions(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "revisions", "body", []*APIProxyRevision(m.Revisions)); err != nil {
		return err
	}

	for i := 0; i < len(m.Revisions); i++ {

		if m.Revisions[i] != nil {
			if err := m.Revisions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("revisions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIProxy) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if m.State != nil {
		if err := m.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIProxy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIProxy) UnmarshalBinary(b []byte) error {
	var res APIProxy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
