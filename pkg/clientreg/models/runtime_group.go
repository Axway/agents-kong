// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RuntimeGroup runtime group
//
// swagger:model RuntimeGroup
type RuntimeGroup struct {

	// List of endpoint urls in this runtime group.
	EndpointUrls []string `json:"endpointUrls"`

	// The environment to which this runtime group belongs
	// Required: true
	// Max Length: 32
	// Min Length: 32
	EnvironmentID *string `json:"environmentId"`

	// Runtime Group unique identifier.
	ID string `json:"id,omitempty"`

	// metadata
	Metadata *AuditMetadata `json:"metadata,omitempty"`

	// The name of the Runtime Group which must be unique.
	// Required: true
	Name *string `json:"name"`

	// state
	State *RuntimeGroupState `json:"state,omitempty"`

	// summary
	Summary string `json:"summary,omitempty"`

	// List of tags
	Tags []string `json:"tags"`
}

// Validate validates this runtime group
func (m *RuntimeGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvironmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RuntimeGroup) validateEnvironmentID(formats strfmt.Registry) error {

	if err := validate.Required("environmentId", "body", m.EnvironmentID); err != nil {
		return err
	}

	if err := validate.MinLength("environmentId", "body", *m.EnvironmentID, 32); err != nil {
		return err
	}

	if err := validate.MaxLength("environmentId", "body", *m.EnvironmentID, 32); err != nil {
		return err
	}

	return nil
}

func (m *RuntimeGroup) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *RuntimeGroup) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RuntimeGroup) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this runtime group based on the context it is used
func (m *RuntimeGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RuntimeGroup) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *RuntimeGroup) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if m.State != nil {
		if err := m.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RuntimeGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RuntimeGroup) UnmarshalBinary(b []byte) error {
	var res RuntimeGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
