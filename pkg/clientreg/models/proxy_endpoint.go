// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProxyEndpoint proxy endpoint
//
// swagger:model ProxyEndpoint
type ProxyEndpoint struct {

	// The resourcePath is a URI fragment (for example /weather)
	// appended to the base URL of an API proxy (for example, http://test.gg.com).
	// resourcePath must be unique within an environment. Uniqueness is
	// validated when an API proxy is generated or imported.
	//
	// Required: true
	// Max Length: 128
	ResourcePath *string `json:"resourcePath"`

	// A reference to the API Proxy Swagger's resource id.
	SpecificationID string `json:"specificationId,omitempty"`
}

// Validate validates this proxy endpoint
func (m *ProxyEndpoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourcePath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProxyEndpoint) validateResourcePath(formats strfmt.Registry) error {

	if err := validate.Required("resourcePath", "body", m.ResourcePath); err != nil {
		return err
	}

	if err := validate.MaxLength("resourcePath", "body", *m.ResourcePath, 128); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this proxy endpoint based on context it is used
func (m *ProxyEndpoint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProxyEndpoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProxyEndpoint) UnmarshalBinary(b []byte) error {
	var res ProxyEndpoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
