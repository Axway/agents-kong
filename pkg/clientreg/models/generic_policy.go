// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GenericPolicy A generic policy, configuration details are held in a string field
//
// swagger:model GenericPolicy
type GenericPolicy struct {
	idField *string

	policyField *string

	// The configuration details, this may be JSON content escaped and held as a string
	// Required: true
	Configuration *string `json:"configuration"`

	// Flag to indicate if the configuration field is encrypted, this field will be decrypted
	Secret *bool `json:"secret,omitempty"`
}

// ID gets the id of this subtype
func (m *GenericPolicy) ID() *string {
	return m.idField
}

// SetID sets the id of this subtype
func (m *GenericPolicy) SetID(val *string) {
	m.idField = val
}

// Policy gets the policy of this subtype
func (m *GenericPolicy) Policy() *string {
	return m.policyField
}

// SetPolicy sets the policy of this subtype
func (m *GenericPolicy) SetPolicy(val *string) {
	m.policyField = val
}

// Type gets the type of this subtype
func (m *GenericPolicy) Type() string {
	return "GenericPolicy"
}

// SetType sets the type of this subtype
func (m *GenericPolicy) SetType(val string) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *GenericPolicy) UnmarshalJSON(raw []byte) error {
	var data struct {

		// The configuration details, this may be JSON content escaped and held as a string
		// Required: true
		Configuration *string `json:"configuration"`

		// Flag to indicate if the configuration field is encrypted, this field will be decrypted
		Secret *bool `json:"secret,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		ID *string `json:"id"`

		Policy *string `json:"policy"`

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result GenericPolicy

	result.idField = base.ID

	result.policyField = base.Policy

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.Configuration = data.Configuration
	result.Secret = data.Secret

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m GenericPolicy) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// The configuration details, this may be JSON content escaped and held as a string
		// Required: true
		Configuration *string `json:"configuration"`

		// Flag to indicate if the configuration field is encrypted, this field will be decrypted
		Secret *bool `json:"secret,omitempty"`
	}{

		Configuration: m.Configuration,

		Secret: m.Secret,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		ID *string `json:"id"`

		Policy *string `json:"policy"`

		Type string `json:"type"`
	}{

		ID: m.ID(),

		Policy: m.Policy(),

		Type: m.Type(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this generic policy
func (m *GenericPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GenericPolicy) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID()); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", *m.ID(), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", *m.ID(), 100); err != nil {
		return err
	}

	if err := validate.Pattern("id", "body", *m.ID(), `^[\w-_\:\.\/]*$`); err != nil {
		return err
	}

	return nil
}

func (m *GenericPolicy) validatePolicy(formats strfmt.Registry) error {

	if err := validate.Required("policy", "body", m.Policy()); err != nil {
		return err
	}

	if err := validate.MinLength("policy", "body", *m.Policy(), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("policy", "body", *m.Policy(), 100); err != nil {
		return err
	}

	if err := validate.Pattern("policy", "body", *m.Policy(), `^[\w-_\:\.\/]*$`); err != nil {
		return err
	}

	return nil
}

func (m *GenericPolicy) validateConfiguration(formats strfmt.Registry) error {

	if err := validate.Required("configuration", "body", m.Configuration); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this generic policy based on the context it is used
func (m *GenericPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *GenericPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GenericPolicy) UnmarshalBinary(b []byte) error {
	var res GenericPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
