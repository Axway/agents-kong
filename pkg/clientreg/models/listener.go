// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Listener listener
//
// swagger:model Listener
type Listener struct {

	// Listener state
	Activated *bool `json:"activated,omitempty"`

	// bind Address
	BindAddress *string `json:"bindAddress,omitempty"`

	// Listener id (format is uuid)
	ID string `json:"id,omitempty"`

	// metadata
	Metadata *AuditMetadata `json:"metadata,omitempty"`

	// Listener name
	// Required: true
	// Max Length: 80
	// Min Length: 1
	Name *string `json:"name"`

	// listener port number
	// Required: true
	// Max Length: 5
	// Min Length: 1
	Port *string `json:"port"`

	// The transfer protocol used
	// Required: true
	// Enum: [http https]
	Protocol *string `json:"protocol"`

	// Runtime Group id (format is uuid)
	RuntimeGroupID string `json:"runtimeGroupId,omitempty"`

	// list of virtual hosts
	// Required: true
	// Min Items: 1
	VirtualHosts []string `json:"virtualHosts"`
}

// Validate validates this listener
func (m *Listener) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualHosts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Listener) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *Listener) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 80); err != nil {
		return err
	}

	return nil
}

func (m *Listener) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	if err := validate.MinLength("port", "body", *m.Port, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("port", "body", *m.Port, 5); err != nil {
		return err
	}

	return nil
}

var listenerTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["http","https"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listenerTypeProtocolPropEnum = append(listenerTypeProtocolPropEnum, v)
	}
}

const (

	// ListenerProtocolHTTP captures enum value "http"
	ListenerProtocolHTTP string = "http"

	// ListenerProtocolHTTPS captures enum value "https"
	ListenerProtocolHTTPS string = "https"
)

// prop value enum
func (m *Listener) validateProtocolEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listenerTypeProtocolPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Listener) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", *m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *Listener) validateVirtualHosts(formats strfmt.Registry) error {

	if err := validate.Required("virtualHosts", "body", m.VirtualHosts); err != nil {
		return err
	}

	iVirtualHostsSize := int64(len(m.VirtualHosts))

	if err := validate.MinItems("virtualHosts", "body", iVirtualHostsSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.VirtualHosts); i++ {

		if err := validate.MinLength("virtualHosts"+"."+strconv.Itoa(i), "body", m.VirtualHosts[i], 1); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validate this listener based on the context it is used
func (m *Listener) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Listener) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Listener) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Listener) UnmarshalBinary(b []byte) error {
	var res Listener
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
