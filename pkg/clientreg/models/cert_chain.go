// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CertChain cert chain
//
// swagger:model CertChain
type CertChain struct {

	// The list of certificate in the chain
	// Read Only: true
	Certificates []*Certificate `json:"certificates"`

	// Unique identifier of the Cert Chain
	// Max Length: 32
	// Min Length: 32
	ID string `json:"id,omitempty"`

	// metadata
	Metadata *AuditMetadata `json:"metadata,omitempty"`

	// Pem encoded cert chain
	// Max Length: 524288
	PemEncoded string `json:"pemEncoded,omitempty"`

	// PEM encoded cert chain is pulled from this URL
	// Max Length: 256
	// Pattern: ^[\w-_\:\.\?\/]*$
	URL string `json:"url,omitempty"`
}

// Validate validates this cert chain
func (m *CertChain) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePemEncoded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertChain) validateCertificates(formats strfmt.Registry) error {
	if swag.IsZero(m.Certificates) { // not required
		return nil
	}

	for i := 0; i < len(m.Certificates); i++ {
		if swag.IsZero(m.Certificates[i]) { // not required
			continue
		}

		if m.Certificates[i] != nil {
			if err := m.Certificates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("certificates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CertChain) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", m.ID, 32); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", m.ID, 32); err != nil {
		return err
	}

	return nil
}

func (m *CertChain) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *CertChain) validatePemEncoded(formats strfmt.Registry) error {
	if swag.IsZero(m.PemEncoded) { // not required
		return nil
	}

	if err := validate.MaxLength("pemEncoded", "body", m.PemEncoded, 524288); err != nil {
		return err
	}

	return nil
}

func (m *CertChain) validateURL(formats strfmt.Registry) error {
	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.MaxLength("url", "body", m.URL, 256); err != nil {
		return err
	}

	if err := validate.Pattern("url", "body", m.URL, `^[\w-_\:\.\?\/]*$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this cert chain based on the context it is used
func (m *CertChain) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCertificates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertChain) contextValidateCertificates(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "certificates", "body", []*Certificate(m.Certificates)); err != nil {
		return err
	}

	for i := 0; i < len(m.Certificates); i++ {

		if m.Certificates[i] != nil {
			if err := m.Certificates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("certificates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CertChain) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CertChain) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertChain) UnmarshalBinary(b []byte) error {
	var res CertChain
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
