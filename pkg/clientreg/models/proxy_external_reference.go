// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProxyExternalReference proxy external reference
//
// swagger:model ProxyExternalReference
type ProxyExternalReference struct {

	// The id of the external reference.
	// Required: true
	ExternalID *string `json:"externalId"`

	// The type of the external reference.
	// Required: true
	ExternalType *string `json:"externalType"`

	// Proxy external reference unique identifier
	ID string `json:"id,omitempty"`

	// metadata
	Metadata *AuditMetadata `json:"metadata,omitempty"`

	// API Proxy unique identifier
	ProxyID string `json:"proxyId,omitempty"`

	// state
	// Enum: [AVAILABLE UNAVAILABLE]
	State *string `json:"state,omitempty"`
}

// Validate validates this proxy external reference
func (m *ProxyExternalReference) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExternalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProxyExternalReference) validateExternalID(formats strfmt.Registry) error {

	if err := validate.Required("externalId", "body", m.ExternalID); err != nil {
		return err
	}

	return nil
}

func (m *ProxyExternalReference) validateExternalType(formats strfmt.Registry) error {

	if err := validate.Required("externalType", "body", m.ExternalType); err != nil {
		return err
	}

	return nil
}

func (m *ProxyExternalReference) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

var proxyExternalReferenceTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AVAILABLE","UNAVAILABLE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		proxyExternalReferenceTypeStatePropEnum = append(proxyExternalReferenceTypeStatePropEnum, v)
	}
}

const (

	// ProxyExternalReferenceStateAVAILABLE captures enum value "AVAILABLE"
	ProxyExternalReferenceStateAVAILABLE string = "AVAILABLE"

	// ProxyExternalReferenceStateUNAVAILABLE captures enum value "UNAVAILABLE"
	ProxyExternalReferenceStateUNAVAILABLE string = "UNAVAILABLE"
)

// prop value enum
func (m *ProxyExternalReference) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, proxyExternalReferenceTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProxyExternalReference) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this proxy external reference based on the context it is used
func (m *ProxyExternalReference) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProxyExternalReference) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProxyExternalReference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProxyExternalReference) UnmarshalBinary(b []byte) error {
	var res ProxyExternalReference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
