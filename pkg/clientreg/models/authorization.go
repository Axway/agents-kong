// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Authorization Authorization
//
// swagger:model Authorization
type Authorization struct {

	// The credential object to be validated
	// Required: true
	// Max Length: 4000
	Credential *string `json:"credential"`

	// The credential type
	// Required: true
	// Max Length: 32
	CredentialType *string `json:"credentialType"`

	// The API proxy id
	// Required: true
	// Max Length: 32
	// Min Length: 32
	ProxyID *string `json:"proxyId"`

	// The proxy revision number
	ProxyRevision int64 `json:"proxyRevision,omitempty"`

	// The runtime group id
	// Required: true
	// Max Length: 32
	// Min Length: 32
	RuntimeGroupID *string `json:"runtimeGroupId"`
}

// Validate validates this authorization
func (m *Authorization) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredential(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentialType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuntimeGroupID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Authorization) validateCredential(formats strfmt.Registry) error {

	if err := validate.Required("credential", "body", m.Credential); err != nil {
		return err
	}

	if err := validate.MaxLength("credential", "body", *m.Credential, 4000); err != nil {
		return err
	}

	return nil
}

func (m *Authorization) validateCredentialType(formats strfmt.Registry) error {

	if err := validate.Required("credentialType", "body", m.CredentialType); err != nil {
		return err
	}

	if err := validate.MaxLength("credentialType", "body", *m.CredentialType, 32); err != nil {
		return err
	}

	return nil
}

func (m *Authorization) validateProxyID(formats strfmt.Registry) error {

	if err := validate.Required("proxyId", "body", m.ProxyID); err != nil {
		return err
	}

	if err := validate.MinLength("proxyId", "body", *m.ProxyID, 32); err != nil {
		return err
	}

	if err := validate.MaxLength("proxyId", "body", *m.ProxyID, 32); err != nil {
		return err
	}

	return nil
}

func (m *Authorization) validateRuntimeGroupID(formats strfmt.Registry) error {

	if err := validate.Required("runtimeGroupId", "body", m.RuntimeGroupID); err != nil {
		return err
	}

	if err := validate.MinLength("runtimeGroupId", "body", *m.RuntimeGroupID, 32); err != nil {
		return err
	}

	if err := validate.MaxLength("runtimeGroupId", "body", *m.RuntimeGroupID, 32); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this authorization based on context it is used
func (m *Authorization) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Authorization) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Authorization) UnmarshalBinary(b []byte) error {
	var res Authorization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
