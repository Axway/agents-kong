// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceAccountRequest A Service Account Request
//
//
// swagger:model ServiceAccountRequest
type ServiceAccountRequest struct {

	// Defines the client authenticator type in AxwayID, signed JWT or client credentials
	// Enum: [JWT SECRET]
	ClientAuthType string `json:"clientAuthType,omitempty"`

	// The environment identifier, required for AASA, CASA and MASA service accounts
	// Max Length: 32
	// Min Length: 32
	EnvironmentID string `json:"environmentId,omitempty"`

	// Generate a new keypair, associate public key with service account and return private key
	GenerateKeypair *bool `json:"generateKeypair,omitempty"`

	// Service Account PEM Encoded Public Key
	// Max Length: 524288
	PemEncodedPublicKey string `json:"pemEncodedPublicKey,omitempty"`

	// The service account name, required for DOSA service accounts
	// Max Length: 100
	// Min Length: 1
	// Pattern: ^[\w\s-_()\[\]]*$
	ServiceAccountName string `json:"serviceAccountName,omitempty"`

	// The service account type
	// Required: true
	// Enum: [AASA CASA MASA DOSA]
	ServiceAccountType *string `json:"serviceAccountType"`
}

// Validate validates this service account request
func (m *ServiceAccountRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientAuthType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePemEncodedPublicKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceAccountName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceAccountType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var serviceAccountRequestTypeClientAuthTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["JWT","SECRET"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceAccountRequestTypeClientAuthTypePropEnum = append(serviceAccountRequestTypeClientAuthTypePropEnum, v)
	}
}

const (

	// ServiceAccountRequestClientAuthTypeJWT captures enum value "JWT"
	ServiceAccountRequestClientAuthTypeJWT string = "JWT"

	// ServiceAccountRequestClientAuthTypeSECRET captures enum value "SECRET"
	ServiceAccountRequestClientAuthTypeSECRET string = "SECRET"
)

// prop value enum
func (m *ServiceAccountRequest) validateClientAuthTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serviceAccountRequestTypeClientAuthTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServiceAccountRequest) validateClientAuthType(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientAuthType) { // not required
		return nil
	}

	// value enum
	if err := m.validateClientAuthTypeEnum("clientAuthType", "body", m.ClientAuthType); err != nil {
		return err
	}

	return nil
}

func (m *ServiceAccountRequest) validateEnvironmentID(formats strfmt.Registry) error {
	if swag.IsZero(m.EnvironmentID) { // not required
		return nil
	}

	if err := validate.MinLength("environmentId", "body", m.EnvironmentID, 32); err != nil {
		return err
	}

	if err := validate.MaxLength("environmentId", "body", m.EnvironmentID, 32); err != nil {
		return err
	}

	return nil
}

func (m *ServiceAccountRequest) validatePemEncodedPublicKey(formats strfmt.Registry) error {
	if swag.IsZero(m.PemEncodedPublicKey) { // not required
		return nil
	}

	if err := validate.MaxLength("pemEncodedPublicKey", "body", m.PemEncodedPublicKey, 524288); err != nil {
		return err
	}

	return nil
}

func (m *ServiceAccountRequest) validateServiceAccountName(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceAccountName) { // not required
		return nil
	}

	if err := validate.MinLength("serviceAccountName", "body", m.ServiceAccountName, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("serviceAccountName", "body", m.ServiceAccountName, 100); err != nil {
		return err
	}

	if err := validate.Pattern("serviceAccountName", "body", m.ServiceAccountName, `^[\w\s-_()\[\]]*$`); err != nil {
		return err
	}

	return nil
}

var serviceAccountRequestTypeServiceAccountTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AASA","CASA","MASA","DOSA"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceAccountRequestTypeServiceAccountTypePropEnum = append(serviceAccountRequestTypeServiceAccountTypePropEnum, v)
	}
}

const (

	// ServiceAccountRequestServiceAccountTypeAASA captures enum value "AASA"
	ServiceAccountRequestServiceAccountTypeAASA string = "AASA"

	// ServiceAccountRequestServiceAccountTypeCASA captures enum value "CASA"
	ServiceAccountRequestServiceAccountTypeCASA string = "CASA"

	// ServiceAccountRequestServiceAccountTypeMASA captures enum value "MASA"
	ServiceAccountRequestServiceAccountTypeMASA string = "MASA"

	// ServiceAccountRequestServiceAccountTypeDOSA captures enum value "DOSA"
	ServiceAccountRequestServiceAccountTypeDOSA string = "DOSA"
)

// prop value enum
func (m *ServiceAccountRequest) validateServiceAccountTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serviceAccountRequestTypeServiceAccountTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServiceAccountRequest) validateServiceAccountType(formats strfmt.Registry) error {

	if err := validate.Required("serviceAccountType", "body", m.ServiceAccountType); err != nil {
		return err
	}

	// value enum
	if err := m.validateServiceAccountTypeEnum("serviceAccountType", "body", *m.ServiceAccountType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this service account request based on context it is used
func (m *ServiceAccountRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServiceAccountRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceAccountRequest) UnmarshalBinary(b []byte) error {
	var res ServiceAccountRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
