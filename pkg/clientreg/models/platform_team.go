// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PlatformTeam platform team
//
// swagger:model PlatformTeam
type PlatformTeam struct {

	// Flag to indicate if this team is default or not
	Default *bool `json:"default,omitempty"`

	// The id of the platform team
	// Required: true
	// Max Length: 36
	// Min Length: 32
	GUID *string `json:"guid"`

	// The name of the platform team
	// Required: true
	// Max Length: 100
	// Min Length: 1
	// Pattern: ^[\w\s-_()\[\]]*$
	Name *string `json:"name"`
}

// Validate validates this platform team
func (m *PlatformTeam) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlatformTeam) validateGUID(formats strfmt.Registry) error {

	if err := validate.Required("guid", "body", m.GUID); err != nil {
		return err
	}

	if err := validate.MinLength("guid", "body", *m.GUID, 32); err != nil {
		return err
	}

	if err := validate.MaxLength("guid", "body", *m.GUID, 36); err != nil {
		return err
	}

	return nil
}

func (m *PlatformTeam) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 100); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", *m.Name, `^[\w\s-_()\[\]]*$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this platform team based on context it is used
func (m *PlatformTeam) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PlatformTeam) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlatformTeam) UnmarshalBinary(b []byte) error {
	var res PlatformTeam
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
