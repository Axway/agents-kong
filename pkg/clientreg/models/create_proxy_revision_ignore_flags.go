// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CreateProxyRevisionIgnoreFlags create proxy revision ignore flags
//
// swagger:model CreateProxyRevisionIgnoreFlags
type CreateProxyRevisionIgnoreFlags string

const (

	// CreateProxyRevisionIgnoreFlagsResponsePolicies captures enum value "ResponsePolicies"
	CreateProxyRevisionIgnoreFlagsResponsePolicies CreateProxyRevisionIgnoreFlags = "ResponsePolicies"

	// CreateProxyRevisionIgnoreFlagsRateLimitingPolicy captures enum value "RateLimitingPolicy"
	CreateProxyRevisionIgnoreFlagsRateLimitingPolicy CreateProxyRevisionIgnoreFlags = "RateLimitingPolicy"
)

// for schema
var createProxyRevisionIgnoreFlagsEnum []interface{}

func init() {
	var res []CreateProxyRevisionIgnoreFlags
	if err := json.Unmarshal([]byte(`["ResponsePolicies","RateLimitingPolicy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createProxyRevisionIgnoreFlagsEnum = append(createProxyRevisionIgnoreFlagsEnum, v)
	}
}

func (m CreateProxyRevisionIgnoreFlags) validateCreateProxyRevisionIgnoreFlagsEnum(path, location string, value CreateProxyRevisionIgnoreFlags) error {
	if err := validate.EnumCase(path, location, value, createProxyRevisionIgnoreFlagsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this create proxy revision ignore flags
func (m CreateProxyRevisionIgnoreFlags) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCreateProxyRevisionIgnoreFlagsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this create proxy revision ignore flags based on context it is used
func (m CreateProxyRevisionIgnoreFlags) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
