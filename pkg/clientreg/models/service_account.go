// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceAccount A Service Account
//
//
// swagger:model ServiceAccount
type ServiceAccount struct {

	// The audience that the Authentication Token is intended for in url format
	// Max Length: 256
	// Pattern: ^[\w-_\:\.\?\/]*$
	Aud string `json:"aud,omitempty"`

	// certificate
	Certificate *ServiceAccountCertificate `json:"certificate,omitempty"`

	// The service account client authentication type
	// Enum: [JWT SECRET]
	ClientAuthType string `json:"clientAuthType,omitempty"`

	// The service account client id
	// Required: true
	// Max Length: 37
	// Min Length: 37
	ClientID *string `json:"clientId"`

	// The service account client secret
	ClientSecret string `json:"clientSecret,omitempty"`

	// metadata
	Metadata *AuditMetadata `json:"metadata,omitempty"`

	// The service account name
	// Max Length: 100
	Name string `json:"name,omitempty"`

	// The authorization Realm
	// Max Length: 20
	Realm string `json:"realm,omitempty"`

	// The service account registration token
	// Required: true
	RegistrationToken *string `json:"registrationToken"`

	// The authorization server token uri
	// Required: true
	// Max Length: 256
	// Pattern: ^[\w-_\:\.\?\/]*$
	TokenURL *string `json:"tokenUrl"`

	// The service account type
	// Enum: [AASA CASA MASA DOSA]
	Type string `json:"type,omitempty"`
}

// Validate validates this service account
func (m *ServiceAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAud(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientAuthType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRealm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrationToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceAccount) validateAud(formats strfmt.Registry) error {
	if swag.IsZero(m.Aud) { // not required
		return nil
	}

	if err := validate.MaxLength("aud", "body", m.Aud, 256); err != nil {
		return err
	}

	if err := validate.Pattern("aud", "body", m.Aud, `^[\w-_\:\.\?\/]*$`); err != nil {
		return err
	}

	return nil
}

func (m *ServiceAccount) validateCertificate(formats strfmt.Registry) error {
	if swag.IsZero(m.Certificate) { // not required
		return nil
	}

	if m.Certificate != nil {
		if err := m.Certificate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificate")
			}
			return err
		}
	}

	return nil
}

var serviceAccountTypeClientAuthTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["JWT","SECRET"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceAccountTypeClientAuthTypePropEnum = append(serviceAccountTypeClientAuthTypePropEnum, v)
	}
}

const (

	// ServiceAccountClientAuthTypeJWT captures enum value "JWT"
	ServiceAccountClientAuthTypeJWT string = "JWT"

	// ServiceAccountClientAuthTypeSECRET captures enum value "SECRET"
	ServiceAccountClientAuthTypeSECRET string = "SECRET"
)

// prop value enum
func (m *ServiceAccount) validateClientAuthTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serviceAccountTypeClientAuthTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServiceAccount) validateClientAuthType(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientAuthType) { // not required
		return nil
	}

	// value enum
	if err := m.validateClientAuthTypeEnum("clientAuthType", "body", m.ClientAuthType); err != nil {
		return err
	}

	return nil
}

func (m *ServiceAccount) validateClientID(formats strfmt.Registry) error {

	if err := validate.Required("clientId", "body", m.ClientID); err != nil {
		return err
	}

	if err := validate.MinLength("clientId", "body", *m.ClientID, 37); err != nil {
		return err
	}

	if err := validate.MaxLength("clientId", "body", *m.ClientID, 37); err != nil {
		return err
	}

	return nil
}

func (m *ServiceAccount) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceAccount) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", m.Name, 100); err != nil {
		return err
	}

	return nil
}

func (m *ServiceAccount) validateRealm(formats strfmt.Registry) error {
	if swag.IsZero(m.Realm) { // not required
		return nil
	}

	if err := validate.MaxLength("realm", "body", m.Realm, 20); err != nil {
		return err
	}

	return nil
}

func (m *ServiceAccount) validateRegistrationToken(formats strfmt.Registry) error {

	if err := validate.Required("registrationToken", "body", m.RegistrationToken); err != nil {
		return err
	}

	return nil
}

func (m *ServiceAccount) validateTokenURL(formats strfmt.Registry) error {

	if err := validate.Required("tokenUrl", "body", m.TokenURL); err != nil {
		return err
	}

	if err := validate.MaxLength("tokenUrl", "body", *m.TokenURL, 256); err != nil {
		return err
	}

	if err := validate.Pattern("tokenUrl", "body", *m.TokenURL, `^[\w-_\:\.\?\/]*$`); err != nil {
		return err
	}

	return nil
}

var serviceAccountTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AASA","CASA","MASA","DOSA"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceAccountTypeTypePropEnum = append(serviceAccountTypeTypePropEnum, v)
	}
}

const (

	// ServiceAccountTypeAASA captures enum value "AASA"
	ServiceAccountTypeAASA string = "AASA"

	// ServiceAccountTypeCASA captures enum value "CASA"
	ServiceAccountTypeCASA string = "CASA"

	// ServiceAccountTypeMASA captures enum value "MASA"
	ServiceAccountTypeMASA string = "MASA"

	// ServiceAccountTypeDOSA captures enum value "DOSA"
	ServiceAccountTypeDOSA string = "DOSA"
)

// prop value enum
func (m *ServiceAccount) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serviceAccountTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServiceAccount) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this service account based on the context it is used
func (m *ServiceAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCertificate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceAccount) contextValidateCertificate(ctx context.Context, formats strfmt.Registry) error {

	if m.Certificate != nil {
		if err := m.Certificate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificate")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceAccount) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceAccount) UnmarshalBinary(b []byte) error {
	var res ServiceAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
