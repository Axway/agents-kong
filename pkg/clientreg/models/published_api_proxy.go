// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PublishedAPIProxy published Api proxy
//
// swagger:model PublishedApiProxy
type PublishedAPIProxy struct {

	// The description of the published Api Proxy.
	// Required: true
	Description *string `json:"description"`

	// Published API Proxy unique identifier
	ID string `json:"id,omitempty"`

	// metadata
	Metadata *AuditMetadata `json:"metadata,omitempty"`

	// API Proxy unique identifier
	ProxyID string `json:"proxyId,omitempty"`

	// The list of runtimes for this proxy.
	// Required: true
	Runtimes []string `json:"runtimes"`

	// The title of the published API proxy.
	// Required: true
	// Max Length: 100
	// Pattern: ^[\w\s-_()\[\]]*$
	Title *string `json:"title"`
}

// Validate validates this published Api proxy
func (m *PublishedAPIProxy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuntimes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublishedAPIProxy) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *PublishedAPIProxy) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *PublishedAPIProxy) validateRuntimes(formats strfmt.Registry) error {

	if err := validate.Required("runtimes", "body", m.Runtimes); err != nil {
		return err
	}

	for i := 0; i < len(m.Runtimes); i++ {

		if err := validate.MinLength("runtimes"+"."+strconv.Itoa(i), "body", m.Runtimes[i], 32); err != nil {
			return err
		}

		if err := validate.MaxLength("runtimes"+"."+strconv.Itoa(i), "body", m.Runtimes[i], 32); err != nil {
			return err
		}

	}

	return nil
}

func (m *PublishedAPIProxy) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	if err := validate.MaxLength("title", "body", *m.Title, 100); err != nil {
		return err
	}

	if err := validate.Pattern("title", "body", *m.Title, `^[\w\s-_()\[\]]*$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this published Api proxy based on the context it is used
func (m *PublishedAPIProxy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublishedAPIProxy) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PublishedAPIProxy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublishedAPIProxy) UnmarshalBinary(b []byte) error {
	var res PublishedAPIProxy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
