// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TargetEndpoint target endpoint
//
// swagger:model TargetEndpoint
type TargetEndpoint struct {

	// A reference to the Cert Chain
	// Max Length: 32
	// Min Length: 32
	CertChainID string `json:"certChainId,omitempty"`

	// The endpoint description
	// Max Length: 350
	// Pattern: ^[ -~\s]*$
	Description string `json:"description,omitempty"`

	// Flag to indicate if this target endpoint lives in a managed hybrid environment or not
	IsInternal *bool `json:"isInternal,omitempty"`

	// The name of this endpoint
	// Max Length: 100
	// Pattern: ^[\w\s-_()\[\]]*$
	Name string `json:"name,omitempty"`

	// A reference to the backed API specifications, if available.
	// Max Length: 512
	// Pattern: ^[\w-_\:\.\?\/]*$
	Spec string `json:"spec,omitempty"`

	// A reference to the backend Swagger's resource id.
	SpecificationID string `json:"specificationId,omitempty"`

	// Defines the network address of the backend service to which the TargetEndpoint
	// forwards request messages
	//
	// Max Length: 256
	// Pattern: ^[\w-_\:\.\?\/]*$
	URL string `json:"url,omitempty"`
}

// Validate validates this target endpoint
func (m *TargetEndpoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertChainID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TargetEndpoint) validateCertChainID(formats strfmt.Registry) error {
	if swag.IsZero(m.CertChainID) { // not required
		return nil
	}

	if err := validate.MinLength("certChainId", "body", m.CertChainID, 32); err != nil {
		return err
	}

	if err := validate.MaxLength("certChainId", "body", m.CertChainID, 32); err != nil {
		return err
	}

	return nil
}

func (m *TargetEndpoint) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", m.Description, 350); err != nil {
		return err
	}

	if err := validate.Pattern("description", "body", m.Description, `^[ -~\s]*$`); err != nil {
		return err
	}

	return nil
}

func (m *TargetEndpoint) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", m.Name, 100); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", m.Name, `^[\w\s-_()\[\]]*$`); err != nil {
		return err
	}

	return nil
}

func (m *TargetEndpoint) validateSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.Spec) { // not required
		return nil
	}

	if err := validate.MaxLength("spec", "body", m.Spec, 512); err != nil {
		return err
	}

	if err := validate.Pattern("spec", "body", m.Spec, `^[\w-_\:\.\?\/]*$`); err != nil {
		return err
	}

	return nil
}

func (m *TargetEndpoint) validateURL(formats strfmt.Registry) error {
	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.MaxLength("url", "body", m.URL, 256); err != nil {
		return err
	}

	if err := validate.Pattern("url", "body", m.URL, `^[\w-_\:\.\?\/]*$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this target endpoint based on context it is used
func (m *TargetEndpoint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TargetEndpoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TargetEndpoint) UnmarshalBinary(b []byte) error {
	var res TargetEndpoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
