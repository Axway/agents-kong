// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuditMetadata audit metadata
//
// swagger:model AuditMetadata
type AuditMetadata struct {

	// The creation time
	// Format: date-time
	CreateTimestamp strfmt.DateTime `json:"createTimestamp,omitempty"`

	// Id of the user that created the entity
	// Max Length: 36
	// Min Length: 32
	CreateUserID string `json:"createUserId,omitempty"`

	// The last modification time
	// Format: date-time
	ModifyTimestamp strfmt.DateTime `json:"modifyTimestamp,omitempty"`

	// Id of the user that last modified the entity
	// Max Length: 36
	// Min Length: 32
	ModifyUserID string `json:"modifyUserId,omitempty"`
}

// Validate validates this audit metadata
func (m *AuditMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifyTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifyUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuditMetadata) validateCreateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("createTimestamp", "body", "date-time", m.CreateTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AuditMetadata) validateCreateUserID(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateUserID) { // not required
		return nil
	}

	if err := validate.MinLength("createUserId", "body", m.CreateUserID, 32); err != nil {
		return err
	}

	if err := validate.MaxLength("createUserId", "body", m.CreateUserID, 36); err != nil {
		return err
	}

	return nil
}

func (m *AuditMetadata) validateModifyTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.ModifyTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("modifyTimestamp", "body", "date-time", m.ModifyTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AuditMetadata) validateModifyUserID(formats strfmt.Registry) error {
	if swag.IsZero(m.ModifyUserID) { // not required
		return nil
	}

	if err := validate.MinLength("modifyUserId", "body", m.ModifyUserID, 32); err != nil {
		return err
	}

	if err := validate.MaxLength("modifyUserId", "body", m.ModifyUserID, 36); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this audit metadata based on context it is used
func (m *AuditMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AuditMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuditMetadata) UnmarshalBinary(b []byte) error {
	var res AuditMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
