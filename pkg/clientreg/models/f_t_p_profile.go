// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FTPProfile Profile for FTP server connection.
//
// swagger:model FTPProfile
type FTPProfile struct {
	applicationIdField string

	descriptionField string

	enabledField *bool

	idField string

	metadataField *AuditMetadata

	nameField *string

	// Client side Authentication has to be set if SSL enabled.
	// Enum: [YES NO OPTIONAL]
	ClientAuthenticationRequired string `json:"clientAuthenticationRequired,omitempty"`

	// connection mode
	// Enum: [ACTIVE PASSIVE BOTH]
	ConnectionMode *string `json:"connectionMode,omitempty"`

	// Host
	// Required: true
	// Pattern: ^([a-zA-Z]\w+(\.?[\w-]+)+\.?)|((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$
	Host *string `json:"host"`

	// The port number
	// Required: true
	// Maximum: 65535
	// Minimum: 1
	Port *int64 `json:"port"`

	// The rangePort Min number only if connection mode is Passive or Both.
	// Maximum: 65535
	// Minimum: 1024
	RangePortFrom int64 `json:"rangePortFrom,omitempty"`

	// The rangePort Max number only if connection mode is Passive or Both.
	// Maximum: 65535
	// Minimum: 1024
	RangePortTo int64 `json:"rangePortTo,omitempty"`

	// ssl
	// Enum: [ENABLED DISABLED]
	Ssl *string `json:"ssl,omitempty"`
}

// ApplicationID gets the application Id of this subtype
func (m *FTPProfile) ApplicationID() string {
	return m.applicationIdField
}

// SetApplicationID sets the application Id of this subtype
func (m *FTPProfile) SetApplicationID(val string) {
	m.applicationIdField = val
}

// Description gets the description of this subtype
func (m *FTPProfile) Description() string {
	return m.descriptionField
}

// SetDescription sets the description of this subtype
func (m *FTPProfile) SetDescription(val string) {
	m.descriptionField = val
}

// Enabled gets the enabled of this subtype
func (m *FTPProfile) Enabled() *bool {
	return m.enabledField
}

// SetEnabled sets the enabled of this subtype
func (m *FTPProfile) SetEnabled(val *bool) {
	m.enabledField = val
}

// ID gets the id of this subtype
func (m *FTPProfile) ID() string {
	return m.idField
}

// SetID sets the id of this subtype
func (m *FTPProfile) SetID(val string) {
	m.idField = val
}

// Metadata gets the metadata of this subtype
func (m *FTPProfile) Metadata() *AuditMetadata {
	return m.metadataField
}

// SetMetadata sets the metadata of this subtype
func (m *FTPProfile) SetMetadata(val *AuditMetadata) {
	m.metadataField = val
}

// Name gets the name of this subtype
func (m *FTPProfile) Name() *string {
	return m.nameField
}

// SetName sets the name of this subtype
func (m *FTPProfile) SetName(val *string) {
	m.nameField = val
}

// Type gets the type of this subtype
func (m *FTPProfile) Type() string {
	return "FTPProfile"
}

// SetType sets the type of this subtype
func (m *FTPProfile) SetType(val string) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *FTPProfile) UnmarshalJSON(raw []byte) error {
	var data struct {

		// Client side Authentication has to be set if SSL enabled.
		// Enum: [YES NO OPTIONAL]
		ClientAuthenticationRequired string `json:"clientAuthenticationRequired,omitempty"`

		// connection mode
		// Enum: [ACTIVE PASSIVE BOTH]
		ConnectionMode *string `json:"connectionMode,omitempty"`

		// Host
		// Required: true
		// Pattern: ^([a-zA-Z]\w+(\.?[\w-]+)+\.?)|((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$
		Host *string `json:"host"`

		// The port number
		// Required: true
		// Maximum: 65535
		// Minimum: 1
		Port *int64 `json:"port"`

		// The rangePort Min number only if connection mode is Passive or Both.
		// Maximum: 65535
		// Minimum: 1024
		RangePortFrom int64 `json:"rangePortFrom,omitempty"`

		// The rangePort Max number only if connection mode is Passive or Both.
		// Maximum: 65535
		// Minimum: 1024
		RangePortTo int64 `json:"rangePortTo,omitempty"`

		// ssl
		// Enum: [ENABLED DISABLED]
		Ssl *string `json:"ssl,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		ApplicationID string `json:"applicationId,omitempty"`

		Description string `json:"description,omitempty"`

		Enabled *bool `json:"enabled,omitempty"`

		ID string `json:"id,omitempty"`

		Metadata *AuditMetadata `json:"metadata,omitempty"`

		Name *string `json:"name"`

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result FTPProfile

	result.applicationIdField = base.ApplicationID

	result.descriptionField = base.Description

	result.enabledField = base.Enabled

	result.idField = base.ID

	result.metadataField = base.Metadata

	result.nameField = base.Name

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.ClientAuthenticationRequired = data.ClientAuthenticationRequired
	result.ConnectionMode = data.ConnectionMode
	result.Host = data.Host
	result.Port = data.Port
	result.RangePortFrom = data.RangePortFrom
	result.RangePortTo = data.RangePortTo
	result.Ssl = data.Ssl

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m FTPProfile) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// Client side Authentication has to be set if SSL enabled.
		// Enum: [YES NO OPTIONAL]
		ClientAuthenticationRequired string `json:"clientAuthenticationRequired,omitempty"`

		// connection mode
		// Enum: [ACTIVE PASSIVE BOTH]
		ConnectionMode *string `json:"connectionMode,omitempty"`

		// Host
		// Required: true
		// Pattern: ^([a-zA-Z]\w+(\.?[\w-]+)+\.?)|((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$
		Host *string `json:"host"`

		// The port number
		// Required: true
		// Maximum: 65535
		// Minimum: 1
		Port *int64 `json:"port"`

		// The rangePort Min number only if connection mode is Passive or Both.
		// Maximum: 65535
		// Minimum: 1024
		RangePortFrom int64 `json:"rangePortFrom,omitempty"`

		// The rangePort Max number only if connection mode is Passive or Both.
		// Maximum: 65535
		// Minimum: 1024
		RangePortTo int64 `json:"rangePortTo,omitempty"`

		// ssl
		// Enum: [ENABLED DISABLED]
		Ssl *string `json:"ssl,omitempty"`
	}{

		ClientAuthenticationRequired: m.ClientAuthenticationRequired,

		ConnectionMode: m.ConnectionMode,

		Host: m.Host,

		Port: m.Port,

		RangePortFrom: m.RangePortFrom,

		RangePortTo: m.RangePortTo,

		Ssl: m.Ssl,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		ApplicationID string `json:"applicationId,omitempty"`

		Description string `json:"description,omitempty"`

		Enabled *bool `json:"enabled,omitempty"`

		ID string `json:"id,omitempty"`

		Metadata *AuditMetadata `json:"metadata,omitempty"`

		Name *string `json:"name"`

		Type string `json:"type"`
	}{

		ApplicationID: m.ApplicationID(),

		Description: m.Description(),

		Enabled: m.Enabled(),

		ID: m.ID(),

		Metadata: m.Metadata(),

		Name: m.Name(),

		Type: m.Type(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this f t p profile
func (m *FTPProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientAuthenticationRequired(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectionMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRangePortFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRangePortTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSsl(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FTPProfile) validateApplicationID(formats strfmt.Registry) error {

	if swag.IsZero(m.ApplicationID()) { // not required
		return nil
	}

	if err := validate.MinLength("applicationId", "body", m.ApplicationID(), 32); err != nil {
		return err
	}

	if err := validate.MaxLength("applicationId", "body", m.ApplicationID(), 32); err != nil {
		return err
	}

	return nil
}

func (m *FTPProfile) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description()) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", m.Description(), 350); err != nil {
		return err
	}

	if err := validate.Pattern("description", "body", m.Description(), `^[ -~\s]*$`); err != nil {
		return err
	}

	return nil
}

func (m *FTPProfile) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID()) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", m.ID(), 32); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", m.ID(), 32); err != nil {
		return err
	}

	return nil
}

func (m *FTPProfile) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata()) { // not required
		return nil
	}

	if m.Metadata() != nil {
		if err := m.Metadata().Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *FTPProfile) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name()); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name(), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name(), 100); err != nil {
		return err
	}

	return nil
}

var fTPProfileTypeClientAuthenticationRequiredPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["YES","NO","OPTIONAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fTPProfileTypeClientAuthenticationRequiredPropEnum = append(fTPProfileTypeClientAuthenticationRequiredPropEnum, v)
	}
}

// property enum
func (m *FTPProfile) validateClientAuthenticationRequiredEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fTPProfileTypeClientAuthenticationRequiredPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FTPProfile) validateClientAuthenticationRequired(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientAuthenticationRequired) { // not required
		return nil
	}

	// value enum
	if err := m.validateClientAuthenticationRequiredEnum("clientAuthenticationRequired", "body", m.ClientAuthenticationRequired); err != nil {
		return err
	}

	return nil
}

var fTPProfileTypeConnectionModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACTIVE","PASSIVE","BOTH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fTPProfileTypeConnectionModePropEnum = append(fTPProfileTypeConnectionModePropEnum, v)
	}
}

// property enum
func (m *FTPProfile) validateConnectionModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fTPProfileTypeConnectionModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FTPProfile) validateConnectionMode(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectionMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateConnectionModeEnum("connectionMode", "body", *m.ConnectionMode); err != nil {
		return err
	}

	return nil
}

func (m *FTPProfile) validateHost(formats strfmt.Registry) error {

	if err := validate.Required("host", "body", m.Host); err != nil {
		return err
	}

	if err := validate.Pattern("host", "body", *m.Host, `^([a-zA-Z]\w+(\.?[\w-]+)+\.?)|((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$`); err != nil {
		return err
	}

	return nil
}

func (m *FTPProfile) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	if err := validate.MinimumInt("port", "body", *m.Port, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("port", "body", *m.Port, 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *FTPProfile) validateRangePortFrom(formats strfmt.Registry) error {

	if swag.IsZero(m.RangePortFrom) { // not required
		return nil
	}

	if err := validate.MinimumInt("rangePortFrom", "body", m.RangePortFrom, 1024, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("rangePortFrom", "body", m.RangePortFrom, 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *FTPProfile) validateRangePortTo(formats strfmt.Registry) error {

	if swag.IsZero(m.RangePortTo) { // not required
		return nil
	}

	if err := validate.MinimumInt("rangePortTo", "body", m.RangePortTo, 1024, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("rangePortTo", "body", m.RangePortTo, 65535, false); err != nil {
		return err
	}

	return nil
}

var fTPProfileTypeSslPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENABLED","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fTPProfileTypeSslPropEnum = append(fTPProfileTypeSslPropEnum, v)
	}
}

// property enum
func (m *FTPProfile) validateSslEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fTPProfileTypeSslPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FTPProfile) validateSsl(formats strfmt.Registry) error {

	if swag.IsZero(m.Ssl) { // not required
		return nil
	}

	// value enum
	if err := m.validateSslEnum("ssl", "body", *m.Ssl); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this f t p profile based on the context it is used
func (m *FTPProfile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FTPProfile) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata() != nil {
		if err := m.Metadata().ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FTPProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FTPProfile) UnmarshalBinary(b []byte) error {
	var res FTPProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
