// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RateLimitingPolicyLevelDefinition Rate Limiting policy level definition
//
// swagger:model RateLimitingPolicyLevelDefinition
type RateLimitingPolicyLevelDefinition struct {

	// Enable this Rate Limiting Level
	// Required: true
	Enabled *bool `json:"enabled"`

	// Interval on which the rate limit is enforced. Minimum supported value is 1 second. Maximum supported value is 1 day.
	Interval *string `json:"interval,omitempty"`

	// Per second limit
	// Maximum: 99999
	// Minimum: 1
	Limit float64 `json:"limit,omitempty"`
}

// Validate validates this rate limiting policy level definition
func (m *RateLimitingPolicyLevelDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RateLimitingPolicyLevelDefinition) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *RateLimitingPolicyLevelDefinition) validateLimit(formats strfmt.Registry) error {
	if swag.IsZero(m.Limit) { // not required
		return nil
	}

	if err := validate.Minimum("limit", "body", m.Limit, 1, false); err != nil {
		return err
	}

	if err := validate.Maximum("limit", "body", m.Limit, 99999, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this rate limiting policy level definition based on context it is used
func (m *RateLimitingPolicyLevelDefinition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RateLimitingPolicyLevelDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RateLimitingPolicyLevelDefinition) UnmarshalBinary(b []byte) error {
	var res RateLimitingPolicyLevelDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
