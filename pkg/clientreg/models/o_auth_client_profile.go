// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OAuthClientProfile o auth client profile
//
// swagger:model OAuthClientProfile
type OAuthClientProfile struct {
	applicationIdField string

	descriptionField string

	enabledField *bool

	idField string

	metadataField *AuditMetadata

	nameField *string

	// The acceptable audience value. This can be null, in which case a server configured default value is used.
	// Max Length: 50
	// Min Length: 1
	// Pattern: ^[\w \:\.\?\/\(\)_-]+$
	Audience string `json:"audience,omitempty"`

	// The end time of the validity period, if not specified the JWT key will not expire. Date should be in ISO-8601 format (ig. "2019-03-11T23:59:59.000Z").
	// Pattern: ^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]{3})?(Z)?$
	EndTimestamp string `json:"endTimestamp,omitempty"`

	// The issuer that produced the Token in url format
	// Required: true
	// Max Length: 256
	// Pattern: ^(https):[\w-_\:\.\?\/]*$
	Issuer *string `json:"issuer"`

	// The path of the metadata relative to the issuer url, standard URI is /.well-known/oauth-authorization-server
	// Required: true
	// Max Length: 256
	// Min Length: 1
	// Pattern: ^[\w-_\#\:\.\?\/]*$
	MetaDataPath *string `json:"metaDataPath"`

	// The client id - that is generated by the external authorization server
	// Required: true
	// Max Length: 150
	// Min Length: 1
	OauthClientID *string `json:"oauthClientId"`

	// The start time of the validity period, if not specified the JWT key will be valid from creation time. Date should be in ISO-8601 format (ig. "2019-03-11T23:59:59.000Z").
	// Pattern: ^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]{3})?(Z)?$
	StartTimestamp string `json:"startTimestamp,omitempty"`
}

// ApplicationID gets the application Id of this subtype
func (m *OAuthClientProfile) ApplicationID() string {
	return m.applicationIdField
}

// SetApplicationID sets the application Id of this subtype
func (m *OAuthClientProfile) SetApplicationID(val string) {
	m.applicationIdField = val
}

// Description gets the description of this subtype
func (m *OAuthClientProfile) Description() string {
	return m.descriptionField
}

// SetDescription sets the description of this subtype
func (m *OAuthClientProfile) SetDescription(val string) {
	m.descriptionField = val
}

// Enabled gets the enabled of this subtype
func (m *OAuthClientProfile) Enabled() *bool {
	return m.enabledField
}

// SetEnabled sets the enabled of this subtype
func (m *OAuthClientProfile) SetEnabled(val *bool) {
	m.enabledField = val
}

// ID gets the id of this subtype
func (m *OAuthClientProfile) ID() string {
	return m.idField
}

// SetID sets the id of this subtype
func (m *OAuthClientProfile) SetID(val string) {
	m.idField = val
}

// Metadata gets the metadata of this subtype
func (m *OAuthClientProfile) Metadata() *AuditMetadata {
	return m.metadataField
}

// SetMetadata sets the metadata of this subtype
func (m *OAuthClientProfile) SetMetadata(val *AuditMetadata) {
	m.metadataField = val
}

// Name gets the name of this subtype
func (m *OAuthClientProfile) Name() *string {
	return m.nameField
}

// SetName sets the name of this subtype
func (m *OAuthClientProfile) SetName(val *string) {
	m.nameField = val
}

// Type gets the type of this subtype
func (m *OAuthClientProfile) Type() string {
	return "OAuthClientProfile"
}

// SetType sets the type of this subtype
func (m *OAuthClientProfile) SetType(val string) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *OAuthClientProfile) UnmarshalJSON(raw []byte) error {
	var data struct {

		// The acceptable audience value. This can be null, in which case a server configured default value is used.
		// Max Length: 50
		// Min Length: 1
		// Pattern: ^[\w \:\.\?\/\(\)_-]+$
		Audience string `json:"audience,omitempty"`

		// The end time of the validity period, if not specified the JWT key will not expire. Date should be in ISO-8601 format (ig. "2019-03-11T23:59:59.000Z").
		// Pattern: ^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]{3})?(Z)?$
		EndTimestamp string `json:"endTimestamp,omitempty"`

		// The issuer that produced the Token in url format
		// Required: true
		// Max Length: 256
		// Pattern: ^(https):[\w-_\:\.\?\/]*$
		Issuer *string `json:"issuer"`

		// The path of the metadata relative to the issuer url, standard URI is /.well-known/oauth-authorization-server
		// Required: true
		// Max Length: 256
		// Min Length: 1
		// Pattern: ^[\w-_\#\:\.\?\/]*$
		MetaDataPath *string `json:"metaDataPath"`

		// The client id - that is generated by the external authorization server
		// Required: true
		// Max Length: 150
		// Min Length: 1
		OauthClientID *string `json:"oauthClientId"`

		// The start time of the validity period, if not specified the JWT key will be valid from creation time. Date should be in ISO-8601 format (ig. "2019-03-11T23:59:59.000Z").
		// Pattern: ^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]{3})?(Z)?$
		StartTimestamp string `json:"startTimestamp,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		ApplicationID string `json:"applicationId,omitempty"`

		Description string `json:"description,omitempty"`

		Enabled *bool `json:"enabled,omitempty"`

		ID string `json:"id,omitempty"`

		Metadata *AuditMetadata `json:"metadata,omitempty"`

		Name *string `json:"name"`

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result OAuthClientProfile

	result.applicationIdField = base.ApplicationID

	result.descriptionField = base.Description

	result.enabledField = base.Enabled

	result.idField = base.ID

	result.metadataField = base.Metadata

	result.nameField = base.Name

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.Audience = data.Audience
	result.EndTimestamp = data.EndTimestamp
	result.Issuer = data.Issuer
	result.MetaDataPath = data.MetaDataPath
	result.OauthClientID = data.OauthClientID
	result.StartTimestamp = data.StartTimestamp

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m OAuthClientProfile) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// The acceptable audience value. This can be null, in which case a server configured default value is used.
		// Max Length: 50
		// Min Length: 1
		// Pattern: ^[\w \:\.\?\/\(\)_-]+$
		Audience string `json:"audience,omitempty"`

		// The end time of the validity period, if not specified the JWT key will not expire. Date should be in ISO-8601 format (ig. "2019-03-11T23:59:59.000Z").
		// Pattern: ^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]{3})?(Z)?$
		EndTimestamp string `json:"endTimestamp,omitempty"`

		// The issuer that produced the Token in url format
		// Required: true
		// Max Length: 256
		// Pattern: ^(https):[\w-_\:\.\?\/]*$
		Issuer *string `json:"issuer"`

		// The path of the metadata relative to the issuer url, standard URI is /.well-known/oauth-authorization-server
		// Required: true
		// Max Length: 256
		// Min Length: 1
		// Pattern: ^[\w-_\#\:\.\?\/]*$
		MetaDataPath *string `json:"metaDataPath"`

		// The client id - that is generated by the external authorization server
		// Required: true
		// Max Length: 150
		// Min Length: 1
		OauthClientID *string `json:"oauthClientId"`

		// The start time of the validity period, if not specified the JWT key will be valid from creation time. Date should be in ISO-8601 format (ig. "2019-03-11T23:59:59.000Z").
		// Pattern: ^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]{3})?(Z)?$
		StartTimestamp string `json:"startTimestamp,omitempty"`
	}{

		Audience: m.Audience,

		EndTimestamp: m.EndTimestamp,

		Issuer: m.Issuer,

		MetaDataPath: m.MetaDataPath,

		OauthClientID: m.OauthClientID,

		StartTimestamp: m.StartTimestamp,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		ApplicationID string `json:"applicationId,omitempty"`

		Description string `json:"description,omitempty"`

		Enabled *bool `json:"enabled,omitempty"`

		ID string `json:"id,omitempty"`

		Metadata *AuditMetadata `json:"metadata,omitempty"`

		Name *string `json:"name"`

		Type string `json:"type"`
	}{

		ApplicationID: m.ApplicationID(),

		Description: m.Description(),

		Enabled: m.Enabled(),

		ID: m.ID(),

		Metadata: m.Metadata(),

		Name: m.Name(),

		Type: m.Type(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this o auth client profile
func (m *OAuthClientProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAudience(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssuer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetaDataPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOauthClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OAuthClientProfile) validateApplicationID(formats strfmt.Registry) error {

	if swag.IsZero(m.ApplicationID()) { // not required
		return nil
	}

	if err := validate.MinLength("applicationId", "body", m.ApplicationID(), 32); err != nil {
		return err
	}

	if err := validate.MaxLength("applicationId", "body", m.ApplicationID(), 32); err != nil {
		return err
	}

	return nil
}

func (m *OAuthClientProfile) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description()) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", m.Description(), 350); err != nil {
		return err
	}

	if err := validate.Pattern("description", "body", m.Description(), `^[ -~\s]*$`); err != nil {
		return err
	}

	return nil
}

func (m *OAuthClientProfile) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID()) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", m.ID(), 32); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", m.ID(), 32); err != nil {
		return err
	}

	return nil
}

func (m *OAuthClientProfile) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata()) { // not required
		return nil
	}

	if m.Metadata() != nil {
		if err := m.Metadata().Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *OAuthClientProfile) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name()); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name(), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name(), 100); err != nil {
		return err
	}

	return nil
}

func (m *OAuthClientProfile) validateAudience(formats strfmt.Registry) error {

	if swag.IsZero(m.Audience) { // not required
		return nil
	}

	if err := validate.MinLength("audience", "body", m.Audience, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("audience", "body", m.Audience, 50); err != nil {
		return err
	}

	if err := validate.Pattern("audience", "body", m.Audience, `^[\w \:\.\?\/\(\)_-]+$`); err != nil {
		return err
	}

	return nil
}

func (m *OAuthClientProfile) validateEndTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.EndTimestamp) { // not required
		return nil
	}

	if err := validate.Pattern("endTimestamp", "body", m.EndTimestamp, `^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]{3})?(Z)?$`); err != nil {
		return err
	}

	return nil
}

func (m *OAuthClientProfile) validateIssuer(formats strfmt.Registry) error {

	if err := validate.Required("issuer", "body", m.Issuer); err != nil {
		return err
	}

	if err := validate.MaxLength("issuer", "body", *m.Issuer, 256); err != nil {
		return err
	}

	if err := validate.Pattern("issuer", "body", *m.Issuer, `^(https):[\w-_\:\.\?\/]*$`); err != nil {
		return err
	}

	return nil
}

func (m *OAuthClientProfile) validateMetaDataPath(formats strfmt.Registry) error {

	if err := validate.Required("metaDataPath", "body", m.MetaDataPath); err != nil {
		return err
	}

	if err := validate.MinLength("metaDataPath", "body", *m.MetaDataPath, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("metaDataPath", "body", *m.MetaDataPath, 256); err != nil {
		return err
	}

	if err := validate.Pattern("metaDataPath", "body", *m.MetaDataPath, `^[\w-_\#\:\.\?\/]*$`); err != nil {
		return err
	}

	return nil
}

func (m *OAuthClientProfile) validateOauthClientID(formats strfmt.Registry) error {

	if err := validate.Required("oauthClientId", "body", m.OauthClientID); err != nil {
		return err
	}

	if err := validate.MinLength("oauthClientId", "body", *m.OauthClientID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("oauthClientId", "body", *m.OauthClientID, 150); err != nil {
		return err
	}

	return nil
}

func (m *OAuthClientProfile) validateStartTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTimestamp) { // not required
		return nil
	}

	if err := validate.Pattern("startTimestamp", "body", m.StartTimestamp, `^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]{3})?(Z)?$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this o auth client profile based on the context it is used
func (m *OAuthClientProfile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OAuthClientProfile) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata() != nil {
		if err := m.Metadata().ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OAuthClientProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OAuthClientProfile) UnmarshalBinary(b []byte) error {
	var res OAuthClientProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
