// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RateLimitingPolicyOverride Overrides for the rate limit policy
//
// swagger:model RateLimitingPolicyOverride
type RateLimitingPolicyOverride struct {

	// per proxy and application
	PerProxyAndApplication *RateLimitingPolicyOverridePerProxyAndApplication `json:"perProxyAndApplication,omitempty"`
}

// Validate validates this rate limiting policy override
func (m *RateLimitingPolicyOverride) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePerProxyAndApplication(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RateLimitingPolicyOverride) validatePerProxyAndApplication(formats strfmt.Registry) error {
	if swag.IsZero(m.PerProxyAndApplication) { // not required
		return nil
	}

	if m.PerProxyAndApplication != nil {
		if err := m.PerProxyAndApplication.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("perProxyAndApplication")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this rate limiting policy override based on the context it is used
func (m *RateLimitingPolicyOverride) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePerProxyAndApplication(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RateLimitingPolicyOverride) contextValidatePerProxyAndApplication(ctx context.Context, formats strfmt.Registry) error {

	if m.PerProxyAndApplication != nil {
		if err := m.PerProxyAndApplication.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("perProxyAndApplication")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RateLimitingPolicyOverride) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RateLimitingPolicyOverride) UnmarshalBinary(b []byte) error {
	var res RateLimitingPolicyOverride
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RateLimitingPolicyOverridePerProxyAndApplication rate limiting policy override per proxy and application
//
// swagger:model RateLimitingPolicyOverridePerProxyAndApplication
type RateLimitingPolicyOverridePerProxyAndApplication struct {

	// Enable/Disable this rate limiting level. If present, overrides the value in the proxy rate-limit policy
	Enabled bool `json:"enabled,omitempty"`

	// Interval on which the rate limit is enforced. Minimum supported value is 1 second. Maximum supported value is 1 day. If limit is not present this field will be ignored. If limit is present this field will default to PT1S.
	Interval string `json:"interval,omitempty"`

	// Per second limit. If present, overrides the default value in the proxy rate-limit policy. Required if enabled=true, will default to 1 if not provided in that case
	// Maximum: 99999
	// Minimum: 1
	Limit float64 `json:"limit,omitempty"`
}

// Validate validates this rate limiting policy override per proxy and application
func (m *RateLimitingPolicyOverridePerProxyAndApplication) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RateLimitingPolicyOverridePerProxyAndApplication) validateLimit(formats strfmt.Registry) error {
	if swag.IsZero(m.Limit) { // not required
		return nil
	}

	if err := validate.Minimum("perProxyAndApplication"+"."+"limit", "body", m.Limit, 1, false); err != nil {
		return err
	}

	if err := validate.Maximum("perProxyAndApplication"+"."+"limit", "body", m.Limit, 99999, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this rate limiting policy override per proxy and application based on context it is used
func (m *RateLimitingPolicyOverridePerProxyAndApplication) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RateLimitingPolicyOverridePerProxyAndApplication) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RateLimitingPolicyOverridePerProxyAndApplication) UnmarshalBinary(b []byte) error {
	var res RateLimitingPolicyOverridePerProxyAndApplication
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
