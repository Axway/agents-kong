// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthenticationProfile authentication profile
//
// swagger:model AuthenticationProfile
type AuthenticationProfile struct {
	applicationIdField string

	descriptionField string

	enabledField *bool

	idField string

	metadataField *AuditMetadata

	nameField *string

	// The login name
	// Required: true
	// Max Length: 256
	// Min Length: 1
	// Pattern: ^[^\!|\#|\*|\||\,|\;|\:]*$
	Login *string `json:"login"`

	// The Password
	// Max Length: 256
	// Min Length: 1
	// Format: password
	Password strfmt.Password `json:"password,omitempty"`
}

// ApplicationID gets the application Id of this subtype
func (m *AuthenticationProfile) ApplicationID() string {
	return m.applicationIdField
}

// SetApplicationID sets the application Id of this subtype
func (m *AuthenticationProfile) SetApplicationID(val string) {
	m.applicationIdField = val
}

// Description gets the description of this subtype
func (m *AuthenticationProfile) Description() string {
	return m.descriptionField
}

// SetDescription sets the description of this subtype
func (m *AuthenticationProfile) SetDescription(val string) {
	m.descriptionField = val
}

// Enabled gets the enabled of this subtype
func (m *AuthenticationProfile) Enabled() *bool {
	return m.enabledField
}

// SetEnabled sets the enabled of this subtype
func (m *AuthenticationProfile) SetEnabled(val *bool) {
	m.enabledField = val
}

// ID gets the id of this subtype
func (m *AuthenticationProfile) ID() string {
	return m.idField
}

// SetID sets the id of this subtype
func (m *AuthenticationProfile) SetID(val string) {
	m.idField = val
}

// Metadata gets the metadata of this subtype
func (m *AuthenticationProfile) Metadata() *AuditMetadata {
	return m.metadataField
}

// SetMetadata sets the metadata of this subtype
func (m *AuthenticationProfile) SetMetadata(val *AuditMetadata) {
	m.metadataField = val
}

// Name gets the name of this subtype
func (m *AuthenticationProfile) Name() *string {
	return m.nameField
}

// SetName sets the name of this subtype
func (m *AuthenticationProfile) SetName(val *string) {
	m.nameField = val
}

// Type gets the type of this subtype
func (m *AuthenticationProfile) Type() string {
	return "AuthenticationProfile"
}

// SetType sets the type of this subtype
func (m *AuthenticationProfile) SetType(val string) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *AuthenticationProfile) UnmarshalJSON(raw []byte) error {
	var data struct {

		// The login name
		// Required: true
		// Max Length: 256
		// Min Length: 1
		// Pattern: ^[^\!|\#|\*|\||\,|\;|\:]*$
		Login *string `json:"login"`

		// The Password
		// Max Length: 256
		// Min Length: 1
		// Format: password
		Password strfmt.Password `json:"password,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		ApplicationID string `json:"applicationId,omitempty"`

		Description string `json:"description,omitempty"`

		Enabled *bool `json:"enabled,omitempty"`

		ID string `json:"id,omitempty"`

		Metadata *AuditMetadata `json:"metadata,omitempty"`

		Name *string `json:"name"`

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result AuthenticationProfile

	result.applicationIdField = base.ApplicationID

	result.descriptionField = base.Description

	result.enabledField = base.Enabled

	result.idField = base.ID

	result.metadataField = base.Metadata

	result.nameField = base.Name

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.Login = data.Login
	result.Password = data.Password

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m AuthenticationProfile) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// The login name
		// Required: true
		// Max Length: 256
		// Min Length: 1
		// Pattern: ^[^\!|\#|\*|\||\,|\;|\:]*$
		Login *string `json:"login"`

		// The Password
		// Max Length: 256
		// Min Length: 1
		// Format: password
		Password strfmt.Password `json:"password,omitempty"`
	}{

		Login: m.Login,

		Password: m.Password,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		ApplicationID string `json:"applicationId,omitempty"`

		Description string `json:"description,omitempty"`

		Enabled *bool `json:"enabled,omitempty"`

		ID string `json:"id,omitempty"`

		Metadata *AuditMetadata `json:"metadata,omitempty"`

		Name *string `json:"name"`

		Type string `json:"type"`
	}{

		ApplicationID: m.ApplicationID(),

		Description: m.Description(),

		Enabled: m.Enabled(),

		ID: m.ID(),

		Metadata: m.Metadata(),

		Name: m.Name(),

		Type: m.Type(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this authentication profile
func (m *AuthenticationProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthenticationProfile) validateApplicationID(formats strfmt.Registry) error {

	if swag.IsZero(m.ApplicationID()) { // not required
		return nil
	}

	if err := validate.MinLength("applicationId", "body", m.ApplicationID(), 32); err != nil {
		return err
	}

	if err := validate.MaxLength("applicationId", "body", m.ApplicationID(), 32); err != nil {
		return err
	}

	return nil
}

func (m *AuthenticationProfile) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description()) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", m.Description(), 350); err != nil {
		return err
	}

	if err := validate.Pattern("description", "body", m.Description(), `^[ -~\s]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AuthenticationProfile) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID()) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", m.ID(), 32); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", m.ID(), 32); err != nil {
		return err
	}

	return nil
}

func (m *AuthenticationProfile) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata()) { // not required
		return nil
	}

	if m.Metadata() != nil {
		if err := m.Metadata().Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *AuthenticationProfile) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name()); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name(), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name(), 100); err != nil {
		return err
	}

	return nil
}

func (m *AuthenticationProfile) validateLogin(formats strfmt.Registry) error {

	if err := validate.Required("login", "body", m.Login); err != nil {
		return err
	}

	if err := validate.MinLength("login", "body", *m.Login, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("login", "body", *m.Login, 256); err != nil {
		return err
	}

	if err := validate.Pattern("login", "body", *m.Login, `^[^\!|\#|\*|\||\,|\;|\:]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AuthenticationProfile) validatePassword(formats strfmt.Registry) error {

	if swag.IsZero(m.Password) { // not required
		return nil
	}

	if err := validate.MinLength("password", "body", m.Password.String(), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("password", "body", m.Password.String(), 256); err != nil {
		return err
	}

	if err := validate.FormatOf("password", "body", "password", m.Password.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this authentication profile based on the context it is used
func (m *AuthenticationProfile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthenticationProfile) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata() != nil {
		if err := m.Metadata().ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthenticationProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthenticationProfile) UnmarshalBinary(b []byte) error {
	var res AuthenticationProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
