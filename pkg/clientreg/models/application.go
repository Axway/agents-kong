// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Application API Central application
//
// swagger:model Application
type Application struct {

	// The description of the application
	// Max Length: 350
	// Pattern: ^[ -~\s]*$
	Description string `json:"description,omitempty"`

	// Flag to indicate if this application is enabled or not
	Enabled *bool `json:"enabled,omitempty"`

	// The id of the application
	// Max Length: 32
	// Min Length: 32
	ID string `json:"id,omitempty"`

	// metadata
	Metadata *AuditMetadata `json:"metadata,omitempty"`

	// The name of the application
	// Required: true
	// Max Length: 100
	// Min Length: 1
	// Pattern: ^[\w\s-_()\[\]]*$
	Name *string `json:"name"`

	// List of tags
	// Max Items: 30
	Tags []string `json:"tags"`

	// The id of the team to which this application belongs. This will be null if the application is orphaned after a team is deleted. It should be set when an application is created.
	// Max Length: 36
	// Min Length: 32
	TeamID string `json:"teamId,omitempty"`

	// The name of the team to which this application belongs
	// Max Length: 100
	// Min Length: 1
	// Pattern: ^[\w\s-_()\[\]]*$
	TeamName string `json:"teamName,omitempty"`
}

// Validate validates this application
func (m *Application) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Application) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", m.Description, 350); err != nil {
		return err
	}

	if err := validate.Pattern("description", "body", m.Description, `^[ -~\s]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Application) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", m.ID, 32); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", m.ID, 32); err != nil {
		return err
	}

	return nil
}

func (m *Application) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *Application) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 100); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", *m.Name, `^[\w\s-_()\[\]]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Application) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	iTagsSize := int64(len(m.Tags))

	if err := validate.MaxItems("tags", "body", iTagsSize, 30); err != nil {
		return err
	}

	return nil
}

func (m *Application) validateTeamID(formats strfmt.Registry) error {
	if swag.IsZero(m.TeamID) { // not required
		return nil
	}

	if err := validate.MinLength("teamId", "body", m.TeamID, 32); err != nil {
		return err
	}

	if err := validate.MaxLength("teamId", "body", m.TeamID, 36); err != nil {
		return err
	}

	return nil
}

func (m *Application) validateTeamName(formats strfmt.Registry) error {
	if swag.IsZero(m.TeamName) { // not required
		return nil
	}

	if err := validate.MinLength("teamName", "body", m.TeamName, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("teamName", "body", m.TeamName, 100); err != nil {
		return err
	}

	if err := validate.Pattern("teamName", "body", m.TeamName, `^[\w\s-_()\[\]]*$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this application based on the context it is used
func (m *Application) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Application) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Application) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Application) UnmarshalBinary(b []byte) error {
	var res Application
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
