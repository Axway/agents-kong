// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HTTPBasicAuthPolicy HTTP Basic authentication policy details
//
// swagger:model HttpBasicAuthPolicy
type HTTPBasicAuthPolicy struct {
	idField *string

	policyField *string

	// The password, this is required but may be set to "", no control chars allowed
	// Required: true
	// Max Length: 256
	// Pattern: ^[ -~\s]*$
	Password *string `json:"password"`

	// The username, no control chars or ":" allowed
	// Required: true
	// Max Length: 256
	// Min Length: 1
	// Pattern: ^[ -9\s;-~]*$
	Username *string `json:"username"`
}

// ID gets the id of this subtype
func (m *HTTPBasicAuthPolicy) ID() *string {
	return m.idField
}

// SetID sets the id of this subtype
func (m *HTTPBasicAuthPolicy) SetID(val *string) {
	m.idField = val
}

// Policy gets the policy of this subtype
func (m *HTTPBasicAuthPolicy) Policy() *string {
	return m.policyField
}

// SetPolicy sets the policy of this subtype
func (m *HTTPBasicAuthPolicy) SetPolicy(val *string) {
	m.policyField = val
}

// Type gets the type of this subtype
func (m *HTTPBasicAuthPolicy) Type() string {
	return "HttpBasicAuthPolicy"
}

// SetType sets the type of this subtype
func (m *HTTPBasicAuthPolicy) SetType(val string) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *HTTPBasicAuthPolicy) UnmarshalJSON(raw []byte) error {
	var data struct {

		// The password, this is required but may be set to "", no control chars allowed
		// Required: true
		// Max Length: 256
		// Pattern: ^[ -~\s]*$
		Password *string `json:"password"`

		// The username, no control chars or ":" allowed
		// Required: true
		// Max Length: 256
		// Min Length: 1
		// Pattern: ^[ -9\s;-~]*$
		Username *string `json:"username"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		ID *string `json:"id"`

		Policy *string `json:"policy"`

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result HTTPBasicAuthPolicy

	result.idField = base.ID

	result.policyField = base.Policy

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.Password = data.Password
	result.Username = data.Username

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m HTTPBasicAuthPolicy) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// The password, this is required but may be set to "", no control chars allowed
		// Required: true
		// Max Length: 256
		// Pattern: ^[ -~\s]*$
		Password *string `json:"password"`

		// The username, no control chars or ":" allowed
		// Required: true
		// Max Length: 256
		// Min Length: 1
		// Pattern: ^[ -9\s;-~]*$
		Username *string `json:"username"`
	}{

		Password: m.Password,

		Username: m.Username,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		ID *string `json:"id"`

		Policy *string `json:"policy"`

		Type string `json:"type"`
	}{

		ID: m.ID(),

		Policy: m.Policy(),

		Type: m.Type(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this Http basic auth policy
func (m *HTTPBasicAuthPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPBasicAuthPolicy) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID()); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", *m.ID(), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", *m.ID(), 100); err != nil {
		return err
	}

	if err := validate.Pattern("id", "body", *m.ID(), `^[\w-_\:\.\/]*$`); err != nil {
		return err
	}

	return nil
}

func (m *HTTPBasicAuthPolicy) validatePolicy(formats strfmt.Registry) error {

	if err := validate.Required("policy", "body", m.Policy()); err != nil {
		return err
	}

	if err := validate.MinLength("policy", "body", *m.Policy(), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("policy", "body", *m.Policy(), 100); err != nil {
		return err
	}

	if err := validate.Pattern("policy", "body", *m.Policy(), `^[\w-_\:\.\/]*$`); err != nil {
		return err
	}

	return nil
}

func (m *HTTPBasicAuthPolicy) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	if err := validate.MaxLength("password", "body", *m.Password, 256); err != nil {
		return err
	}

	if err := validate.Pattern("password", "body", *m.Password, `^[ -~\s]*$`); err != nil {
		return err
	}

	return nil
}

func (m *HTTPBasicAuthPolicy) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	if err := validate.MinLength("username", "body", *m.Username, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("username", "body", *m.Username, 256); err != nil {
		return err
	}

	if err := validate.Pattern("username", "body", *m.Username, `^[ -9\s;-~]*$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this Http basic auth policy based on the context it is used
func (m *HTTPBasicAuthPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *HTTPBasicAuthPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPBasicAuthPolicy) UnmarshalBinary(b []byte) error {
	var res HTTPBasicAuthPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
