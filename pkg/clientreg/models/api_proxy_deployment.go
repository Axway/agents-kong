// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIProxyDeployment API proxy deployment
//
// swagger:model APIProxyDeployment
type APIProxyDeployment struct {

	// The environment unique identifier.
	// Max Length: 32
	// Min Length: 32
	EnvironmentID string `json:"environmentId,omitempty"`

	// The environment name.
	// Max Length: 100
	// Min Length: 1
	EnvironmentName string `json:"environmentName,omitempty"`

	// Proxy revision identifier.
	// Required: true
	ProxyRevision *int64 `json:"proxyRevision"`

	// The runtime group unique identifier.
	// Required: true
	// Max Length: 32
	// Min Length: 32
	RuntimeGroupID *string `json:"runtimeGroupId"`

	// Runtime group name.
	RuntimeGroupName string `json:"runtimeGroupName,omitempty"`
}

// Validate validates this API proxy deployment
func (m *APIProxyDeployment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvironmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuntimeGroupID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIProxyDeployment) validateEnvironmentID(formats strfmt.Registry) error {
	if swag.IsZero(m.EnvironmentID) { // not required
		return nil
	}

	if err := validate.MinLength("environmentId", "body", m.EnvironmentID, 32); err != nil {
		return err
	}

	if err := validate.MaxLength("environmentId", "body", m.EnvironmentID, 32); err != nil {
		return err
	}

	return nil
}

func (m *APIProxyDeployment) validateEnvironmentName(formats strfmt.Registry) error {
	if swag.IsZero(m.EnvironmentName) { // not required
		return nil
	}

	if err := validate.MinLength("environmentName", "body", m.EnvironmentName, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("environmentName", "body", m.EnvironmentName, 100); err != nil {
		return err
	}

	return nil
}

func (m *APIProxyDeployment) validateProxyRevision(formats strfmt.Registry) error {

	if err := validate.Required("proxyRevision", "body", m.ProxyRevision); err != nil {
		return err
	}

	return nil
}

func (m *APIProxyDeployment) validateRuntimeGroupID(formats strfmt.Registry) error {

	if err := validate.Required("runtimeGroupId", "body", m.RuntimeGroupID); err != nil {
		return err
	}

	if err := validate.MinLength("runtimeGroupId", "body", *m.RuntimeGroupID, 32); err != nil {
		return err
	}

	if err := validate.MaxLength("runtimeGroupId", "body", *m.RuntimeGroupID, 32); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this API proxy deployment based on context it is used
func (m *APIProxyDeployment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *APIProxyDeployment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIProxyDeployment) UnmarshalBinary(b []byte) error {
	var res APIProxyDeployment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
