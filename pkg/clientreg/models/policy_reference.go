// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PolicyReference Policy data for client authentication, and backend authentication
//
// swagger:discriminator PolicyReference type
type PolicyReference interface {
	runtime.Validatable
	runtime.ContextValidatable

	// Policy reference unique identifier
	// Required: true
	// Max Length: 100
	// Min Length: 1
	// Pattern: ^[\w-_\:\.\/]*$
	ID() *string
	SetID(*string)

	// URN to the policy
	// Required: true
	// Max Length: 100
	// Min Length: 1
	// Pattern: ^[\w-_\:\.\/]*$
	Policy() *string
	SetPolicy(*string)

	// The type of the policy
	// Required: true
	// Enum: [GenericPolicy HttpBasicAuthPolicy RateLimitingPolicy OAuthClientAuthPolicy]
	Type() string
	SetType(string)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type policyReference struct {
	idField *string

	policyField *string

	typeField string
}

// ID gets the id of this polymorphic type
func (m *policyReference) ID() *string {
	return m.idField
}

// SetID sets the id of this polymorphic type
func (m *policyReference) SetID(val *string) {
	m.idField = val
}

// Policy gets the policy of this polymorphic type
func (m *policyReference) Policy() *string {
	return m.policyField
}

// SetPolicy sets the policy of this polymorphic type
func (m *policyReference) SetPolicy(val *string) {
	m.policyField = val
}

// Type gets the type of this polymorphic type
func (m *policyReference) Type() string {
	return "PolicyReference"
}

// SetType sets the type of this polymorphic type
func (m *policyReference) SetType(val string) {
}

// UnmarshalPolicyReferenceSlice unmarshals polymorphic slices of PolicyReference
func UnmarshalPolicyReferenceSlice(reader io.Reader, consumer runtime.Consumer) ([]PolicyReference, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []PolicyReference
	for _, element := range elements {
		obj, err := unmarshalPolicyReference(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalPolicyReference unmarshals polymorphic PolicyReference
func UnmarshalPolicyReference(reader io.Reader, consumer runtime.Consumer) (PolicyReference, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalPolicyReference(data, consumer)
}

func unmarshalPolicyReference(data []byte, consumer runtime.Consumer) (PolicyReference, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the type property.
	var getType struct {
		Type string `json:"type"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("type", "body", getType.Type); err != nil {
		return nil, err
	}

	// The value of type is used to determine which type to create and unmarshal the data into
	switch getType.Type {
	case "GenericPolicy":
		var result GenericPolicy
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "HttpBasicAuthPolicy":
		var result HTTPBasicAuthPolicy
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "OAuthClientAuthPolicy":
		var result OAuthClientAuthPolicy
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "PolicyReference":
		var result policyReference
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "RateLimitingPolicy":
		var result RateLimitingPolicy
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid type value: %q", getType.Type)
}

// Validate validates this policy reference
func (m *policyReference) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *policyReference) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID()); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", *m.ID(), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", *m.ID(), 100); err != nil {
		return err
	}

	if err := validate.Pattern("id", "body", *m.ID(), `^[\w-_\:\.\/]*$`); err != nil {
		return err
	}

	return nil
}

func (m *policyReference) validatePolicy(formats strfmt.Registry) error {

	if err := validate.Required("policy", "body", m.Policy()); err != nil {
		return err
	}

	if err := validate.MinLength("policy", "body", *m.Policy(), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("policy", "body", *m.Policy(), 100); err != nil {
		return err
	}

	if err := validate.Pattern("policy", "body", *m.Policy(), `^[\w-_\:\.\/]*$`); err != nil {
		return err
	}

	return nil
}

var policyReferenceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GenericPolicy","HttpBasicAuthPolicy","RateLimitingPolicy","OAuthClientAuthPolicy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyReferenceTypeTypePropEnum = append(policyReferenceTypeTypePropEnum, v)
	}
}

const (

	// PolicyReferenceTypeGenericPolicy captures enum value "GenericPolicy"
	PolicyReferenceTypeGenericPolicy string = "GenericPolicy"

	// PolicyReferenceTypeHTTPBasicAuthPolicy captures enum value "HttpBasicAuthPolicy"
	PolicyReferenceTypeHTTPBasicAuthPolicy string = "HttpBasicAuthPolicy"

	// PolicyReferenceTypeRateLimitingPolicy captures enum value "RateLimitingPolicy"
	PolicyReferenceTypeRateLimitingPolicy string = "RateLimitingPolicy"

	// PolicyReferenceTypeOAuthClientAuthPolicy captures enum value "OAuthClientAuthPolicy"
	PolicyReferenceTypeOAuthClientAuthPolicy string = "OAuthClientAuthPolicy"
)

// prop value enum
func (m *policyReference) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policyReferenceTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

// ContextValidate validates this policy reference based on context it is used
func (m *policyReference) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
