// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIProxyRevision API proxy revision
//
// swagger:model APIProxyRevision
type APIProxyRevision struct {

	// governance
	Governance *Governance `json:"governance,omitempty"`

	// API Proxy unique identifier
	ID string `json:"id,omitempty"`

	// metadata
	Metadata *AuditMetadata `json:"metadata,omitempty"`

	// The name of the API proxy, which must be unique.
	// Required: true
	// Max Length: 100
	// Pattern: ^[\w\s-_()\[\]]*$
	Name *string `json:"name"`

	// Policies associated with the API Proxy revision.
	Policies []string `json:"policies"`

	// proxy endpoint
	ProxyEndpoint *ProxyEndpoint `json:"proxyEndpoint,omitempty"`

	// Resources associated with the API Proxy revision.
	Resources []*Resource `json:"resources"`

	// The proxy revision number.
	Revision int64 `json:"revision,omitempty"`

	// target endpoint
	TargetEndpoint *TargetEndpoint `json:"targetEndpoint,omitempty"`
}

// Validate validates this API proxy revision
func (m *APIProxyRevision) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGovernance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIProxyRevision) validateGovernance(formats strfmt.Registry) error {
	if swag.IsZero(m.Governance) { // not required
		return nil
	}

	if m.Governance != nil {
		if err := m.Governance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("governance")
			}
			return err
		}
	}

	return nil
}

func (m *APIProxyRevision) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *APIProxyRevision) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 100); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", *m.Name, `^[\w\s-_()\[\]]*$`); err != nil {
		return err
	}

	return nil
}

func (m *APIProxyRevision) validateProxyEndpoint(formats strfmt.Registry) error {
	if swag.IsZero(m.ProxyEndpoint) { // not required
		return nil
	}

	if m.ProxyEndpoint != nil {
		if err := m.ProxyEndpoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proxyEndpoint")
			}
			return err
		}
	}

	return nil
}

func (m *APIProxyRevision) validateResources(formats strfmt.Registry) error {
	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	for i := 0; i < len(m.Resources); i++ {
		if swag.IsZero(m.Resources[i]) { // not required
			continue
		}

		if m.Resources[i] != nil {
			if err := m.Resources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIProxyRevision) validateTargetEndpoint(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetEndpoint) { // not required
		return nil
	}

	if m.TargetEndpoint != nil {
		if err := m.TargetEndpoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetEndpoint")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this API proxy revision based on the context it is used
func (m *APIProxyRevision) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGovernance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProxyEndpoint(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetEndpoint(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIProxyRevision) contextValidateGovernance(ctx context.Context, formats strfmt.Registry) error {

	if m.Governance != nil {
		if err := m.Governance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("governance")
			}
			return err
		}
	}

	return nil
}

func (m *APIProxyRevision) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *APIProxyRevision) contextValidateProxyEndpoint(ctx context.Context, formats strfmt.Registry) error {

	if m.ProxyEndpoint != nil {
		if err := m.ProxyEndpoint.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proxyEndpoint")
			}
			return err
		}
	}

	return nil
}

func (m *APIProxyRevision) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Resources); i++ {

		if m.Resources[i] != nil {
			if err := m.Resources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIProxyRevision) contextValidateTargetEndpoint(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetEndpoint != nil {
		if err := m.TargetEndpoint.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetEndpoint")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIProxyRevision) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIProxyRevision) UnmarshalBinary(b []byte) error {
	var res APIProxyRevision
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
