// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIKey API key
//
// swagger:model APIKey
type APIKey struct {

	// The API key. This value is auto-generated
	APIKey string `json:"apiKey,omitempty"`

	// The id of the application to which this API key belongs
	// Required: true
	// Max Length: 32
	// Min Length: 32
	ApplicationID *string `json:"applicationId"`

	// Flag to indicate if this API key is enabled or not
	Enabled *bool `json:"enabled,omitempty"`

	// The end time of the validity period, if not specified the API key will not expire
	// Format: date-time
	EndTimestamp strfmt.DateTime `json:"endTimestamp,omitempty"`

	// The id of the API key
	// Max Length: 32
	// Min Length: 32
	ID string `json:"id,omitempty"`

	// metadata
	Metadata *AuditMetadata `json:"metadata,omitempty"`

	// The API key secret. This value is auto-generated and returned only upon APIKey creation.
	Secret string `json:"secret,omitempty"`

	// The start time of the validity period, if not specified the API key will be valid from creation time
	// Format: date-time
	StartTimestamp strfmt.DateTime `json:"startTimestamp,omitempty"`
}

// Validate validates this API key
func (m *APIKey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIKey) validateApplicationID(formats strfmt.Registry) error {

	if err := validate.Required("applicationId", "body", m.ApplicationID); err != nil {
		return err
	}

	if err := validate.MinLength("applicationId", "body", *m.ApplicationID, 32); err != nil {
		return err
	}

	if err := validate.MaxLength("applicationId", "body", *m.ApplicationID, 32); err != nil {
		return err
	}

	return nil
}

func (m *APIKey) validateEndTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.EndTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("endTimestamp", "body", "date-time", m.EndTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *APIKey) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", m.ID, 32); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", m.ID, 32); err != nil {
		return err
	}

	return nil
}

func (m *APIKey) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *APIKey) validateStartTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.StartTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("startTimestamp", "body", "date-time", m.StartTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this API key based on the context it is used
func (m *APIKey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIKey) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIKey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIKey) UnmarshalBinary(b []byte) error {
	var res APIKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
