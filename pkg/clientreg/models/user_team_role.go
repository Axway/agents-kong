// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserTeamRole user team role
//
// swagger:model UserTeamRole
type UserTeamRole struct {

	// List of role ids
	// Required: true
	Roles []string `json:"roles"`

	// The id of the team
	// Required: true
	// Max Length: 36
	// Min Length: 32
	TeamID *string `json:"teamId"`
}

// Validate validates this user team role
func (m *UserTeamRole) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserTeamRole) validateRoles(formats strfmt.Registry) error {

	if err := validate.Required("roles", "body", m.Roles); err != nil {
		return err
	}

	for i := 0; i < len(m.Roles); i++ {

		if err := validate.MinLength("roles"+"."+strconv.Itoa(i), "body", m.Roles[i], 32); err != nil {
			return err
		}

		if err := validate.MaxLength("roles"+"."+strconv.Itoa(i), "body", m.Roles[i], 32); err != nil {
			return err
		}

	}

	return nil
}

func (m *UserTeamRole) validateTeamID(formats strfmt.Registry) error {

	if err := validate.Required("teamId", "body", m.TeamID); err != nil {
		return err
	}

	if err := validate.MinLength("teamId", "body", *m.TeamID, 32); err != nil {
		return err
	}

	if err := validate.MaxLength("teamId", "body", *m.TeamID, 36); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user team role based on context it is used
func (m *UserTeamRole) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserTeamRole) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserTeamRole) UnmarshalBinary(b []byte) error {
	var res UserTeamRole
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
